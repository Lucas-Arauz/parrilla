
parri_V1-0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004384  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004490  08004490  00005490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c0  080044c0  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080044c0  080044c0  00006018  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080044c0  080044c0  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c0  080044c0  000054c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080044c4  080044c4  000054c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080044c8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  20000018  080044e0  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  080044e0  000061bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b22c  00000000  00000000  00006041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8b  00000000  00000000  0001126d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  000130f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ac  00000000  00000000  00013d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001724d  00000000  00000000  0001472c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d86f  00000000  00000000  0002b979  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000870ad  00000000  00000000  000391e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c0295  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003650  00000000  00000000  000c02d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c3928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	08004478 	.word	0x08004478

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	08004478 	.word	0x08004478

0800014c <__aeabi_dmul>:
 800014c:	b570      	push	{r4, r5, r6, lr}
 800014e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000152:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000156:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015a:	bf1d      	ittte	ne
 800015c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000160:	ea94 0f0c 	teqne	r4, ip
 8000164:	ea95 0f0c 	teqne	r5, ip
 8000168:	f000 f8de 	bleq	8000328 <__aeabi_dmul+0x1dc>
 800016c:	442c      	add	r4, r5
 800016e:	ea81 0603 	eor.w	r6, r1, r3
 8000172:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000176:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800017e:	bf18      	it	ne
 8000180:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000184:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000188:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800018c:	d038      	beq.n	8000200 <__aeabi_dmul+0xb4>
 800018e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000192:	f04f 0500 	mov.w	r5, #0
 8000196:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800019e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a2:	f04f 0600 	mov.w	r6, #0
 80001a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001aa:	f09c 0f00 	teq	ip, #0
 80001ae:	bf18      	it	ne
 80001b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b4:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001b8:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001bc:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c0:	d204      	bcs.n	80001cc <__aeabi_dmul+0x80>
 80001c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001c6:	416d      	adcs	r5, r5
 80001c8:	eb46 0606 	adc.w	r6, r6, r6
 80001cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e4:	bf88      	it	hi
 80001e6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ea:	d81e      	bhi.n	800022a <__aeabi_dmul+0xde>
 80001ec:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f0:	bf08      	it	eq
 80001f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001f6:	f150 0000 	adcs.w	r0, r0, #0
 80001fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80001fe:	bd70      	pop	{r4, r5, r6, pc}
 8000200:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000204:	ea46 0101 	orr.w	r1, r6, r1
 8000208:	ea40 0002 	orr.w	r0, r0, r2
 800020c:	ea81 0103 	eor.w	r1, r1, r3
 8000210:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000214:	bfc2      	ittt	gt
 8000216:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800021e:	bd70      	popgt	{r4, r5, r6, pc}
 8000220:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000224:	f04f 0e00 	mov.w	lr, #0
 8000228:	3c01      	subs	r4, #1
 800022a:	f300 80ab 	bgt.w	8000384 <__aeabi_dmul+0x238>
 800022e:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000232:	bfde      	ittt	le
 8000234:	2000      	movle	r0, #0
 8000236:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023a:	bd70      	pople	{r4, r5, r6, pc}
 800023c:	f1c4 0400 	rsb	r4, r4, #0
 8000240:	3c20      	subs	r4, #32
 8000242:	da35      	bge.n	80002b0 <__aeabi_dmul+0x164>
 8000244:	340c      	adds	r4, #12
 8000246:	dc1b      	bgt.n	8000280 <__aeabi_dmul+0x134>
 8000248:	f104 0414 	add.w	r4, r4, #20
 800024c:	f1c4 0520 	rsb	r5, r4, #32
 8000250:	fa00 f305 	lsl.w	r3, r0, r5
 8000254:	fa20 f004 	lsr.w	r0, r0, r4
 8000258:	fa01 f205 	lsl.w	r2, r1, r5
 800025c:	ea40 0002 	orr.w	r0, r0, r2
 8000260:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000264:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000268:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800026c:	fa21 f604 	lsr.w	r6, r1, r4
 8000270:	eb42 0106 	adc.w	r1, r2, r6
 8000274:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000278:	bf08      	it	eq
 800027a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800027e:	bd70      	pop	{r4, r5, r6, pc}
 8000280:	f1c4 040c 	rsb	r4, r4, #12
 8000284:	f1c4 0520 	rsb	r5, r4, #32
 8000288:	fa00 f304 	lsl.w	r3, r0, r4
 800028c:	fa20 f005 	lsr.w	r0, r0, r5
 8000290:	fa01 f204 	lsl.w	r2, r1, r4
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800029c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a0:	f141 0100 	adc.w	r1, r1, #0
 80002a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002a8:	bf08      	it	eq
 80002aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ae:	bd70      	pop	{r4, r5, r6, pc}
 80002b0:	f1c4 0520 	rsb	r5, r4, #32
 80002b4:	fa00 f205 	lsl.w	r2, r0, r5
 80002b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80002bc:	fa20 f304 	lsr.w	r3, r0, r4
 80002c0:	fa01 f205 	lsl.w	r2, r1, r5
 80002c4:	ea43 0302 	orr.w	r3, r3, r2
 80002c8:	fa21 f004 	lsr.w	r0, r1, r4
 80002cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d0:	fa21 f204 	lsr.w	r2, r1, r4
 80002d4:	ea20 0002 	bic.w	r0, r0, r2
 80002d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e0:	bf08      	it	eq
 80002e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002e6:	bd70      	pop	{r4, r5, r6, pc}
 80002e8:	f094 0f00 	teq	r4, #0
 80002ec:	d10f      	bne.n	800030e <__aeabi_dmul+0x1c2>
 80002ee:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f2:	0040      	lsls	r0, r0, #1
 80002f4:	eb41 0101 	adc.w	r1, r1, r1
 80002f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80002fc:	bf08      	it	eq
 80002fe:	3c01      	subeq	r4, #1
 8000300:	d0f7      	beq.n	80002f2 <__aeabi_dmul+0x1a6>
 8000302:	ea41 0106 	orr.w	r1, r1, r6
 8000306:	f095 0f00 	teq	r5, #0
 800030a:	bf18      	it	ne
 800030c:	4770      	bxne	lr
 800030e:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000312:	0052      	lsls	r2, r2, #1
 8000314:	eb43 0303 	adc.w	r3, r3, r3
 8000318:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 800031c:	bf08      	it	eq
 800031e:	3d01      	subeq	r5, #1
 8000320:	d0f7      	beq.n	8000312 <__aeabi_dmul+0x1c6>
 8000322:	ea43 0306 	orr.w	r3, r3, r6
 8000326:	4770      	bx	lr
 8000328:	ea94 0f0c 	teq	r4, ip
 800032c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000330:	bf18      	it	ne
 8000332:	ea95 0f0c 	teqne	r5, ip
 8000336:	d00c      	beq.n	8000352 <__aeabi_dmul+0x206>
 8000338:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800033c:	bf18      	it	ne
 800033e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000342:	d1d1      	bne.n	80002e8 <__aeabi_dmul+0x19c>
 8000344:	ea81 0103 	eor.w	r1, r1, r3
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800034c:	f04f 0000 	mov.w	r0, #0
 8000350:	bd70      	pop	{r4, r5, r6, pc}
 8000352:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000356:	bf06      	itte	eq
 8000358:	4610      	moveq	r0, r2
 800035a:	4619      	moveq	r1, r3
 800035c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000360:	d019      	beq.n	8000396 <__aeabi_dmul+0x24a>
 8000362:	ea94 0f0c 	teq	r4, ip
 8000366:	d102      	bne.n	800036e <__aeabi_dmul+0x222>
 8000368:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800036c:	d113      	bne.n	8000396 <__aeabi_dmul+0x24a>
 800036e:	ea95 0f0c 	teq	r5, ip
 8000372:	d105      	bne.n	8000380 <__aeabi_dmul+0x234>
 8000374:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000378:	bf1c      	itt	ne
 800037a:	4610      	movne	r0, r2
 800037c:	4619      	movne	r1, r3
 800037e:	d10a      	bne.n	8000396 <__aeabi_dmul+0x24a>
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000388:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800038c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800039e:	bd70      	pop	{r4, r5, r6, pc}

080003a0 <__aeabi_drsub>:
 80003a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a4:	e002      	b.n	80003ac <__adddf3>
 80003a6:	bf00      	nop

080003a8 <__aeabi_dsub>:
 80003a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003ac <__adddf3>:
 80003ac:	b530      	push	{r4, r5, lr}
 80003ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003b6:	ea94 0f05 	teq	r4, r5
 80003ba:	bf08      	it	eq
 80003bc:	ea90 0f02 	teqeq	r0, r2
 80003c0:	bf1f      	itttt	ne
 80003c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d2:	f000 80e2 	beq.w	800059a <__adddf3+0x1ee>
 80003d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003de:	bfb8      	it	lt
 80003e0:	426d      	neglt	r5, r5
 80003e2:	dd0c      	ble.n	80003fe <__adddf3+0x52>
 80003e4:	442c      	add	r4, r5
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	ea82 0000 	eor.w	r0, r2, r0
 80003f2:	ea83 0101 	eor.w	r1, r3, r1
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	2d36      	cmp	r5, #54	@ 0x36
 8000400:	bf88      	it	hi
 8000402:	bd30      	pophi	{r4, r5, pc}
 8000404:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000408:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800040c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000410:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000414:	d002      	beq.n	800041c <__adddf3+0x70>
 8000416:	4240      	negs	r0, r0
 8000418:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800041c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000420:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000424:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000428:	d002      	beq.n	8000430 <__adddf3+0x84>
 800042a:	4252      	negs	r2, r2
 800042c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000430:	ea94 0f05 	teq	r4, r5
 8000434:	f000 80a7 	beq.w	8000586 <__adddf3+0x1da>
 8000438:	f1a4 0401 	sub.w	r4, r4, #1
 800043c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000440:	db0d      	blt.n	800045e <__adddf3+0xb2>
 8000442:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000446:	fa22 f205 	lsr.w	r2, r2, r5
 800044a:	1880      	adds	r0, r0, r2
 800044c:	f141 0100 	adc.w	r1, r1, #0
 8000450:	fa03 f20e 	lsl.w	r2, r3, lr
 8000454:	1880      	adds	r0, r0, r2
 8000456:	fa43 f305 	asr.w	r3, r3, r5
 800045a:	4159      	adcs	r1, r3
 800045c:	e00e      	b.n	800047c <__adddf3+0xd0>
 800045e:	f1a5 0520 	sub.w	r5, r5, #32
 8000462:	f10e 0e20 	add.w	lr, lr, #32
 8000466:	2a01      	cmp	r2, #1
 8000468:	fa03 fc0e 	lsl.w	ip, r3, lr
 800046c:	bf28      	it	cs
 800046e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000472:	fa43 f305 	asr.w	r3, r3, r5
 8000476:	18c0      	adds	r0, r0, r3
 8000478:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800047c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000480:	d507      	bpl.n	8000492 <__adddf3+0xe6>
 8000482:	f04f 0e00 	mov.w	lr, #0
 8000486:	f1dc 0c00 	rsbs	ip, ip, #0
 800048a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800048e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000492:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000496:	d31b      	bcc.n	80004d0 <__adddf3+0x124>
 8000498:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800049c:	d30c      	bcc.n	80004b8 <__adddf3+0x10c>
 800049e:	0849      	lsrs	r1, r1, #1
 80004a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004a8:	f104 0401 	add.w	r4, r4, #1
 80004ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b4:	f080 809a 	bcs.w	80005ec <__adddf3+0x240>
 80004b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004bc:	bf08      	it	eq
 80004be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c2:	f150 0000 	adcs.w	r0, r0, #0
 80004c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ca:	ea41 0105 	orr.w	r1, r1, r5
 80004ce:	bd30      	pop	{r4, r5, pc}
 80004d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d4:	4140      	adcs	r0, r0
 80004d6:	eb41 0101 	adc.w	r1, r1, r1
 80004da:	3c01      	subs	r4, #1
 80004dc:	bf28      	it	cs
 80004de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e2:	d2e9      	bcs.n	80004b8 <__adddf3+0x10c>
 80004e4:	f091 0f00 	teq	r1, #0
 80004e8:	bf04      	itt	eq
 80004ea:	4601      	moveq	r1, r0
 80004ec:	2000      	moveq	r0, #0
 80004ee:	fab1 f381 	clz	r3, r1
 80004f2:	bf08      	it	eq
 80004f4:	3320      	addeq	r3, #32
 80004f6:	f1a3 030b 	sub.w	r3, r3, #11
 80004fa:	f1b3 0220 	subs.w	r2, r3, #32
 80004fe:	da0c      	bge.n	800051a <__adddf3+0x16e>
 8000500:	320c      	adds	r2, #12
 8000502:	dd08      	ble.n	8000516 <__adddf3+0x16a>
 8000504:	f102 0c14 	add.w	ip, r2, #20
 8000508:	f1c2 020c 	rsb	r2, r2, #12
 800050c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000510:	fa21 f102 	lsr.w	r1, r1, r2
 8000514:	e00c      	b.n	8000530 <__adddf3+0x184>
 8000516:	f102 0214 	add.w	r2, r2, #20
 800051a:	bfd8      	it	le
 800051c:	f1c2 0c20 	rsble	ip, r2, #32
 8000520:	fa01 f102 	lsl.w	r1, r1, r2
 8000524:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000528:	bfdc      	itt	le
 800052a:	ea41 010c 	orrle.w	r1, r1, ip
 800052e:	4090      	lslle	r0, r2
 8000530:	1ae4      	subs	r4, r4, r3
 8000532:	bfa2      	ittt	ge
 8000534:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000538:	4329      	orrge	r1, r5
 800053a:	bd30      	popge	{r4, r5, pc}
 800053c:	ea6f 0404 	mvn.w	r4, r4
 8000540:	3c1f      	subs	r4, #31
 8000542:	da1c      	bge.n	800057e <__adddf3+0x1d2>
 8000544:	340c      	adds	r4, #12
 8000546:	dc0e      	bgt.n	8000566 <__adddf3+0x1ba>
 8000548:	f104 0414 	add.w	r4, r4, #20
 800054c:	f1c4 0220 	rsb	r2, r4, #32
 8000550:	fa20 f004 	lsr.w	r0, r0, r4
 8000554:	fa01 f302 	lsl.w	r3, r1, r2
 8000558:	ea40 0003 	orr.w	r0, r0, r3
 800055c:	fa21 f304 	lsr.w	r3, r1, r4
 8000560:	ea45 0103 	orr.w	r1, r5, r3
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f1c4 040c 	rsb	r4, r4, #12
 800056a:	f1c4 0220 	rsb	r2, r4, #32
 800056e:	fa20 f002 	lsr.w	r0, r0, r2
 8000572:	fa01 f304 	lsl.w	r3, r1, r4
 8000576:	ea40 0003 	orr.w	r0, r0, r3
 800057a:	4629      	mov	r1, r5
 800057c:	bd30      	pop	{r4, r5, pc}
 800057e:	fa21 f004 	lsr.w	r0, r1, r4
 8000582:	4629      	mov	r1, r5
 8000584:	bd30      	pop	{r4, r5, pc}
 8000586:	f094 0f00 	teq	r4, #0
 800058a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800058e:	bf06      	itte	eq
 8000590:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000594:	3401      	addeq	r4, #1
 8000596:	3d01      	subne	r5, #1
 8000598:	e74e      	b.n	8000438 <__adddf3+0x8c>
 800059a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800059e:	bf18      	it	ne
 80005a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a4:	d029      	beq.n	80005fa <__adddf3+0x24e>
 80005a6:	ea94 0f05 	teq	r4, r5
 80005aa:	bf08      	it	eq
 80005ac:	ea90 0f02 	teqeq	r0, r2
 80005b0:	d005      	beq.n	80005be <__adddf3+0x212>
 80005b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005b6:	bf04      	itt	eq
 80005b8:	4619      	moveq	r1, r3
 80005ba:	4610      	moveq	r0, r2
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	ea91 0f03 	teq	r1, r3
 80005c2:	bf1e      	ittt	ne
 80005c4:	2100      	movne	r1, #0
 80005c6:	2000      	movne	r0, #0
 80005c8:	bd30      	popne	{r4, r5, pc}
 80005ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ce:	d105      	bne.n	80005dc <__adddf3+0x230>
 80005d0:	0040      	lsls	r0, r0, #1
 80005d2:	4149      	adcs	r1, r1
 80005d4:	bf28      	it	cs
 80005d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd30      	pop	{r4, r5, pc}
 80005dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e0:	bf3c      	itt	cc
 80005e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005e6:	bd30      	popcc	{r4, r5, pc}
 80005e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f4:	f04f 0000 	mov.w	r0, #0
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005fe:	bf1a      	itte	ne
 8000600:	4619      	movne	r1, r3
 8000602:	4610      	movne	r0, r2
 8000604:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000608:	bf1c      	itt	ne
 800060a:	460b      	movne	r3, r1
 800060c:	4602      	movne	r2, r0
 800060e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000612:	bf06      	itte	eq
 8000614:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000618:	ea91 0f03 	teqeq	r1, r3
 800061c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop

08000624 <__aeabi_ui2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f04f 0500 	mov.w	r5, #0
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	e750      	b.n	80004e4 <__adddf3+0x138>
 8000642:	bf00      	nop

08000644 <__aeabi_i2d>:
 8000644:	f090 0f00 	teq	r0, #0
 8000648:	bf04      	itt	eq
 800064a:	2100      	moveq	r1, #0
 800064c:	4770      	bxeq	lr
 800064e:	b530      	push	{r4, r5, lr}
 8000650:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000654:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000658:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800065c:	bf48      	it	mi
 800065e:	4240      	negmi	r0, r0
 8000660:	f04f 0100 	mov.w	r1, #0
 8000664:	e73e      	b.n	80004e4 <__adddf3+0x138>
 8000666:	bf00      	nop

08000668 <__aeabi_f2d>:
 8000668:	0042      	lsls	r2, r0, #1
 800066a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800066e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000672:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000676:	bf1f      	itttt	ne
 8000678:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800067c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000680:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000684:	4770      	bxne	lr
 8000686:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068a:	bf08      	it	eq
 800068c:	4770      	bxeq	lr
 800068e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000692:	bf04      	itt	eq
 8000694:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000698:	4770      	bxeq	lr
 800069a:	b530      	push	{r4, r5, lr}
 800069c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	e71c      	b.n	80004e4 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_ul2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f04f 0500 	mov.w	r5, #0
 80006ba:	e00a      	b.n	80006d2 <__aeabi_l2d+0x16>

080006bc <__aeabi_l2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_l2d+0x16>
 80006cc:	4240      	negs	r0, r0
 80006ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006de:	f43f aed8 	beq.w	8000492 <__adddf3+0xe6>
 80006e2:	f04f 0203 	mov.w	r2, #3
 80006e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ea:	bf18      	it	ne
 80006ec:	3203      	addne	r2, #3
 80006ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f2:	bf18      	it	ne
 80006f4:	3203      	addne	r2, #3
 80006f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fa:	f1c2 0320 	rsb	r3, r2, #32
 80006fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000702:	fa20 f002 	lsr.w	r0, r0, r2
 8000706:	fa01 fe03 	lsl.w	lr, r1, r3
 800070a:	ea40 000e 	orr.w	r0, r0, lr
 800070e:	fa21 f102 	lsr.w	r1, r1, r2
 8000712:	4414      	add	r4, r2
 8000714:	e6bd      	b.n	8000492 <__adddf3+0xe6>
 8000716:	bf00      	nop

08000718 <__aeabi_d2f>:
 8000718:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800071c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000720:	bf24      	itt	cs
 8000722:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000726:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800072a:	d90d      	bls.n	8000748 <__aeabi_d2f+0x30>
 800072c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000730:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000734:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000738:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 800073c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000740:	bf08      	it	eq
 8000742:	f020 0001 	biceq.w	r0, r0, #1
 8000746:	4770      	bx	lr
 8000748:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 800074c:	d121      	bne.n	8000792 <__aeabi_d2f+0x7a>
 800074e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000752:	bfbc      	itt	lt
 8000754:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000758:	4770      	bxlt	lr
 800075a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800075e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000762:	f1c2 0218 	rsb	r2, r2, #24
 8000766:	f1c2 0c20 	rsb	ip, r2, #32
 800076a:	fa10 f30c 	lsls.w	r3, r0, ip
 800076e:	fa20 f002 	lsr.w	r0, r0, r2
 8000772:	bf18      	it	ne
 8000774:	f040 0001 	orrne.w	r0, r0, #1
 8000778:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800077c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000780:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000784:	ea40 000c 	orr.w	r0, r0, ip
 8000788:	fa23 f302 	lsr.w	r3, r3, r2
 800078c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000790:	e7cc      	b.n	800072c <__aeabi_d2f+0x14>
 8000792:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000796:	d107      	bne.n	80007a8 <__aeabi_d2f+0x90>
 8000798:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800079c:	bf1e      	ittt	ne
 800079e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 80007a2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 80007a6:	4770      	bxne	lr
 80007a8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 80007ac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80007b0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007b4:	4770      	bx	lr
 80007b6:	bf00      	nop

080007b8 <__aeabi_frsub>:
 80007b8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80007bc:	e002      	b.n	80007c4 <__addsf3>
 80007be:	bf00      	nop

080007c0 <__aeabi_fsub>:
 80007c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080007c4 <__addsf3>:
 80007c4:	0042      	lsls	r2, r0, #1
 80007c6:	bf1f      	itttt	ne
 80007c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80007cc:	ea92 0f03 	teqne	r2, r3
 80007d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80007d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80007d8:	d06a      	beq.n	80008b0 <__addsf3+0xec>
 80007da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80007de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80007e2:	bfc1      	itttt	gt
 80007e4:	18d2      	addgt	r2, r2, r3
 80007e6:	4041      	eorgt	r1, r0
 80007e8:	4048      	eorgt	r0, r1
 80007ea:	4041      	eorgt	r1, r0
 80007ec:	bfb8      	it	lt
 80007ee:	425b      	neglt	r3, r3
 80007f0:	2b19      	cmp	r3, #25
 80007f2:	bf88      	it	hi
 80007f4:	4770      	bxhi	lr
 80007f6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80007fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007fe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000802:	bf18      	it	ne
 8000804:	4240      	negne	r0, r0
 8000806:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800080a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800080e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000812:	bf18      	it	ne
 8000814:	4249      	negne	r1, r1
 8000816:	ea92 0f03 	teq	r2, r3
 800081a:	d03f      	beq.n	800089c <__addsf3+0xd8>
 800081c:	f1a2 0201 	sub.w	r2, r2, #1
 8000820:	fa41 fc03 	asr.w	ip, r1, r3
 8000824:	eb10 000c 	adds.w	r0, r0, ip
 8000828:	f1c3 0320 	rsb	r3, r3, #32
 800082c:	fa01 f103 	lsl.w	r1, r1, r3
 8000830:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000834:	d502      	bpl.n	800083c <__addsf3+0x78>
 8000836:	4249      	negs	r1, r1
 8000838:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800083c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000840:	d313      	bcc.n	800086a <__addsf3+0xa6>
 8000842:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000846:	d306      	bcc.n	8000856 <__addsf3+0x92>
 8000848:	0840      	lsrs	r0, r0, #1
 800084a:	ea4f 0131 	mov.w	r1, r1, rrx
 800084e:	f102 0201 	add.w	r2, r2, #1
 8000852:	2afe      	cmp	r2, #254	@ 0xfe
 8000854:	d251      	bcs.n	80008fa <__addsf3+0x136>
 8000856:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800085a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800085e:	bf08      	it	eq
 8000860:	f020 0001 	biceq.w	r0, r0, #1
 8000864:	ea40 0003 	orr.w	r0, r0, r3
 8000868:	4770      	bx	lr
 800086a:	0049      	lsls	r1, r1, #1
 800086c:	eb40 0000 	adc.w	r0, r0, r0
 8000870:	3a01      	subs	r2, #1
 8000872:	bf28      	it	cs
 8000874:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000878:	d2ed      	bcs.n	8000856 <__addsf3+0x92>
 800087a:	fab0 fc80 	clz	ip, r0
 800087e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000882:	ebb2 020c 	subs.w	r2, r2, ip
 8000886:	fa00 f00c 	lsl.w	r0, r0, ip
 800088a:	bfaa      	itet	ge
 800088c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000890:	4252      	neglt	r2, r2
 8000892:	4318      	orrge	r0, r3
 8000894:	bfbc      	itt	lt
 8000896:	40d0      	lsrlt	r0, r2
 8000898:	4318      	orrlt	r0, r3
 800089a:	4770      	bx	lr
 800089c:	f092 0f00 	teq	r2, #0
 80008a0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80008a4:	bf06      	itte	eq
 80008a6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80008aa:	3201      	addeq	r2, #1
 80008ac:	3b01      	subne	r3, #1
 80008ae:	e7b5      	b.n	800081c <__addsf3+0x58>
 80008b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80008b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80008b8:	bf18      	it	ne
 80008ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008be:	d021      	beq.n	8000904 <__addsf3+0x140>
 80008c0:	ea92 0f03 	teq	r2, r3
 80008c4:	d004      	beq.n	80008d0 <__addsf3+0x10c>
 80008c6:	f092 0f00 	teq	r2, #0
 80008ca:	bf08      	it	eq
 80008cc:	4608      	moveq	r0, r1
 80008ce:	4770      	bx	lr
 80008d0:	ea90 0f01 	teq	r0, r1
 80008d4:	bf1c      	itt	ne
 80008d6:	2000      	movne	r0, #0
 80008d8:	4770      	bxne	lr
 80008da:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80008de:	d104      	bne.n	80008ea <__addsf3+0x126>
 80008e0:	0040      	lsls	r0, r0, #1
 80008e2:	bf28      	it	cs
 80008e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80008e8:	4770      	bx	lr
 80008ea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80008ee:	bf3c      	itt	cc
 80008f0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80008f4:	4770      	bxcc	lr
 80008f6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80008fa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80008fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000902:	4770      	bx	lr
 8000904:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000908:	bf16      	itet	ne
 800090a:	4608      	movne	r0, r1
 800090c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000910:	4601      	movne	r1, r0
 8000912:	0242      	lsls	r2, r0, #9
 8000914:	bf06      	itte	eq
 8000916:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800091a:	ea90 0f01 	teqeq	r0, r1
 800091e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000922:	4770      	bx	lr

08000924 <__aeabi_ui2f>:
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	e004      	b.n	8000934 <__aeabi_i2f+0x8>
 800092a:	bf00      	nop

0800092c <__aeabi_i2f>:
 800092c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000930:	bf48      	it	mi
 8000932:	4240      	negmi	r0, r0
 8000934:	ea5f 0c00 	movs.w	ip, r0
 8000938:	bf08      	it	eq
 800093a:	4770      	bxeq	lr
 800093c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000940:	4601      	mov	r1, r0
 8000942:	f04f 0000 	mov.w	r0, #0
 8000946:	e01c      	b.n	8000982 <__aeabi_l2f+0x2a>

08000948 <__aeabi_ul2f>:
 8000948:	ea50 0201 	orrs.w	r2, r0, r1
 800094c:	bf08      	it	eq
 800094e:	4770      	bxeq	lr
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	e00a      	b.n	800096c <__aeabi_l2f+0x14>
 8000956:	bf00      	nop

08000958 <__aeabi_l2f>:
 8000958:	ea50 0201 	orrs.w	r2, r0, r1
 800095c:	bf08      	it	eq
 800095e:	4770      	bxeq	lr
 8000960:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000964:	d502      	bpl.n	800096c <__aeabi_l2f+0x14>
 8000966:	4240      	negs	r0, r0
 8000968:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800096c:	ea5f 0c01 	movs.w	ip, r1
 8000970:	bf02      	ittt	eq
 8000972:	4684      	moveq	ip, r0
 8000974:	4601      	moveq	r1, r0
 8000976:	2000      	moveq	r0, #0
 8000978:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800097c:	bf08      	it	eq
 800097e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000982:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000986:	fabc f28c 	clz	r2, ip
 800098a:	3a08      	subs	r2, #8
 800098c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000990:	db10      	blt.n	80009b4 <__aeabi_l2f+0x5c>
 8000992:	fa01 fc02 	lsl.w	ip, r1, r2
 8000996:	4463      	add	r3, ip
 8000998:	fa00 fc02 	lsl.w	ip, r0, r2
 800099c:	f1c2 0220 	rsb	r2, r2, #32
 80009a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80009a4:	fa20 f202 	lsr.w	r2, r0, r2
 80009a8:	eb43 0002 	adc.w	r0, r3, r2
 80009ac:	bf08      	it	eq
 80009ae:	f020 0001 	biceq.w	r0, r0, #1
 80009b2:	4770      	bx	lr
 80009b4:	f102 0220 	add.w	r2, r2, #32
 80009b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80009bc:	f1c2 0220 	rsb	r2, r2, #32
 80009c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80009c4:	fa21 f202 	lsr.w	r2, r1, r2
 80009c8:	eb43 0002 	adc.w	r0, r3, r2
 80009cc:	bf08      	it	eq
 80009ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d2:	4770      	bx	lr

080009d4 <__aeabi_fmul>:
 80009d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009dc:	bf1e      	ittt	ne
 80009de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009e2:	ea92 0f0c 	teqne	r2, ip
 80009e6:	ea93 0f0c 	teqne	r3, ip
 80009ea:	d06f      	beq.n	8000acc <__aeabi_fmul+0xf8>
 80009ec:	441a      	add	r2, r3
 80009ee:	ea80 0c01 	eor.w	ip, r0, r1
 80009f2:	0240      	lsls	r0, r0, #9
 80009f4:	bf18      	it	ne
 80009f6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80009fa:	d01e      	beq.n	8000a3a <__aeabi_fmul+0x66>
 80009fc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000a00:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000a04:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000a08:	fba0 3101 	umull	r3, r1, r0, r1
 8000a0c:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a10:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000a14:	bf3e      	ittt	cc
 8000a16:	0049      	lslcc	r1, r1, #1
 8000a18:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000a1c:	005b      	lslcc	r3, r3, #1
 8000a1e:	ea40 0001 	orr.w	r0, r0, r1
 8000a22:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000a26:	2afd      	cmp	r2, #253	@ 0xfd
 8000a28:	d81d      	bhi.n	8000a66 <__aeabi_fmul+0x92>
 8000a2a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	4770      	bx	lr
 8000a3a:	f090 0f00 	teq	r0, #0
 8000a3e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a42:	bf08      	it	eq
 8000a44:	0249      	lsleq	r1, r1, #9
 8000a46:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a4a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000a4e:	3a7f      	subs	r2, #127	@ 0x7f
 8000a50:	bfc2      	ittt	gt
 8000a52:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a56:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a5a:	4770      	bxgt	lr
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a60:	f04f 0300 	mov.w	r3, #0
 8000a64:	3a01      	subs	r2, #1
 8000a66:	dc5d      	bgt.n	8000b24 <__aeabi_fmul+0x150>
 8000a68:	f112 0f19 	cmn.w	r2, #25
 8000a6c:	bfdc      	itt	le
 8000a6e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000a72:	4770      	bxle	lr
 8000a74:	f1c2 0200 	rsb	r2, r2, #0
 8000a78:	0041      	lsls	r1, r0, #1
 8000a7a:	fa21 f102 	lsr.w	r1, r1, r2
 8000a7e:	f1c2 0220 	rsb	r2, r2, #32
 8000a82:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a86:	ea5f 0031 	movs.w	r0, r1, rrx
 8000a8a:	f140 0000 	adc.w	r0, r0, #0
 8000a8e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000a92:	bf08      	it	eq
 8000a94:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000a98:	4770      	bx	lr
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa2:	bf02      	ittt	eq
 8000aa4:	0040      	lsleq	r0, r0, #1
 8000aa6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aaa:	3a01      	subeq	r2, #1
 8000aac:	d0f9      	beq.n	8000aa2 <__aeabi_fmul+0xce>
 8000aae:	ea40 000c 	orr.w	r0, r0, ip
 8000ab2:	f093 0f00 	teq	r3, #0
 8000ab6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000aba:	bf02      	ittt	eq
 8000abc:	0049      	lsleq	r1, r1, #1
 8000abe:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac2:	3b01      	subeq	r3, #1
 8000ac4:	d0f9      	beq.n	8000aba <__aeabi_fmul+0xe6>
 8000ac6:	ea41 010c 	orr.w	r1, r1, ip
 8000aca:	e78f      	b.n	80009ec <__aeabi_fmul+0x18>
 8000acc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad0:	ea92 0f0c 	teq	r2, ip
 8000ad4:	bf18      	it	ne
 8000ad6:	ea93 0f0c 	teqne	r3, ip
 8000ada:	d00a      	beq.n	8000af2 <__aeabi_fmul+0x11e>
 8000adc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000ae0:	bf18      	it	ne
 8000ae2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000ae6:	d1d8      	bne.n	8000a9a <__aeabi_fmul+0xc6>
 8000ae8:	ea80 0001 	eor.w	r0, r0, r1
 8000aec:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	4770      	bx	lr
 8000af2:	f090 0f00 	teq	r0, #0
 8000af6:	bf17      	itett	ne
 8000af8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000afc:	4608      	moveq	r0, r1
 8000afe:	f091 0f00 	teqne	r1, #0
 8000b02:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000b06:	d014      	beq.n	8000b32 <__aeabi_fmul+0x15e>
 8000b08:	ea92 0f0c 	teq	r2, ip
 8000b0c:	d101      	bne.n	8000b12 <__aeabi_fmul+0x13e>
 8000b0e:	0242      	lsls	r2, r0, #9
 8000b10:	d10f      	bne.n	8000b32 <__aeabi_fmul+0x15e>
 8000b12:	ea93 0f0c 	teq	r3, ip
 8000b16:	d103      	bne.n	8000b20 <__aeabi_fmul+0x14c>
 8000b18:	024b      	lsls	r3, r1, #9
 8000b1a:	bf18      	it	ne
 8000b1c:	4608      	movne	r0, r1
 8000b1e:	d108      	bne.n	8000b32 <__aeabi_fmul+0x15e>
 8000b20:	ea80 0001 	eor.w	r0, r0, r1
 8000b24:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000b28:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b30:	4770      	bx	lr
 8000b32:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b36:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000b3a:	4770      	bx	lr

08000b3c <__aeabi_fdiv>:
 8000b3c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000b40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b44:	bf1e      	ittt	ne
 8000b46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b4a:	ea92 0f0c 	teqne	r2, ip
 8000b4e:	ea93 0f0c 	teqne	r3, ip
 8000b52:	d069      	beq.n	8000c28 <__aeabi_fdiv+0xec>
 8000b54:	eba2 0203 	sub.w	r2, r2, r3
 8000b58:	ea80 0c01 	eor.w	ip, r0, r1
 8000b5c:	0249      	lsls	r1, r1, #9
 8000b5e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000b62:	d037      	beq.n	8000bd4 <__aeabi_fdiv+0x98>
 8000b64:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000b68:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000b6c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000b70:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000b74:	428b      	cmp	r3, r1
 8000b76:	bf38      	it	cc
 8000b78:	005b      	lslcc	r3, r3, #1
 8000b7a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000b7e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000b82:	428b      	cmp	r3, r1
 8000b84:	bf24      	itt	cs
 8000b86:	1a5b      	subcs	r3, r3, r1
 8000b88:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b8c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000b90:	bf24      	itt	cs
 8000b92:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000b96:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b9a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000b9e:	bf24      	itt	cs
 8000ba0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ba4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ba8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000bac:	bf24      	itt	cs
 8000bae:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000bb2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bb6:	011b      	lsls	r3, r3, #4
 8000bb8:	bf18      	it	ne
 8000bba:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000bbe:	d1e0      	bne.n	8000b82 <__aeabi_fdiv+0x46>
 8000bc0:	2afd      	cmp	r2, #253	@ 0xfd
 8000bc2:	f63f af50 	bhi.w	8000a66 <__aeabi_fmul+0x92>
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bcc:	bf08      	it	eq
 8000bce:	f020 0001 	biceq.w	r0, r0, #1
 8000bd2:	4770      	bx	lr
 8000bd4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000bd8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bdc:	327f      	adds	r2, #127	@ 0x7f
 8000bde:	bfc2      	ittt	gt
 8000be0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000be4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000be8:	4770      	bxgt	lr
 8000bea:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bee:	f04f 0300 	mov.w	r3, #0
 8000bf2:	3a01      	subs	r2, #1
 8000bf4:	e737      	b.n	8000a66 <__aeabi_fmul+0x92>
 8000bf6:	f092 0f00 	teq	r2, #0
 8000bfa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000bfe:	bf02      	ittt	eq
 8000c00:	0040      	lsleq	r0, r0, #1
 8000c02:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c06:	3a01      	subeq	r2, #1
 8000c08:	d0f9      	beq.n	8000bfe <__aeabi_fdiv+0xc2>
 8000c0a:	ea40 000c 	orr.w	r0, r0, ip
 8000c0e:	f093 0f00 	teq	r3, #0
 8000c12:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c16:	bf02      	ittt	eq
 8000c18:	0049      	lsleq	r1, r1, #1
 8000c1a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c1e:	3b01      	subeq	r3, #1
 8000c20:	d0f9      	beq.n	8000c16 <__aeabi_fdiv+0xda>
 8000c22:	ea41 010c 	orr.w	r1, r1, ip
 8000c26:	e795      	b.n	8000b54 <__aeabi_fdiv+0x18>
 8000c28:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c2c:	ea92 0f0c 	teq	r2, ip
 8000c30:	d108      	bne.n	8000c44 <__aeabi_fdiv+0x108>
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	f47f af7d 	bne.w	8000b32 <__aeabi_fmul+0x15e>
 8000c38:	ea93 0f0c 	teq	r3, ip
 8000c3c:	f47f af70 	bne.w	8000b20 <__aeabi_fmul+0x14c>
 8000c40:	4608      	mov	r0, r1
 8000c42:	e776      	b.n	8000b32 <__aeabi_fmul+0x15e>
 8000c44:	ea93 0f0c 	teq	r3, ip
 8000c48:	d104      	bne.n	8000c54 <__aeabi_fdiv+0x118>
 8000c4a:	024b      	lsls	r3, r1, #9
 8000c4c:	f43f af4c 	beq.w	8000ae8 <__aeabi_fmul+0x114>
 8000c50:	4608      	mov	r0, r1
 8000c52:	e76e      	b.n	8000b32 <__aeabi_fmul+0x15e>
 8000c54:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000c58:	bf18      	it	ne
 8000c5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000c5e:	d1ca      	bne.n	8000bf6 <__aeabi_fdiv+0xba>
 8000c60:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000c64:	f47f af5c 	bne.w	8000b20 <__aeabi_fmul+0x14c>
 8000c68:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000c6c:	f47f af3c 	bne.w	8000ae8 <__aeabi_fmul+0x114>
 8000c70:	e75f      	b.n	8000b32 <__aeabi_fmul+0x15e>
 8000c72:	bf00      	nop

08000c74 <__gesf2>:
 8000c74:	f04f 3cff 	mov.w	ip, #4294967295
 8000c78:	e006      	b.n	8000c88 <__cmpsf2+0x4>
 8000c7a:	bf00      	nop

08000c7c <__lesf2>:
 8000c7c:	f04f 0c01 	mov.w	ip, #1
 8000c80:	e002      	b.n	8000c88 <__cmpsf2+0x4>
 8000c82:	bf00      	nop

08000c84 <__cmpsf2>:
 8000c84:	f04f 0c01 	mov.w	ip, #1
 8000c88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c8c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d011      	beq.n	8000cc4 <__cmpsf2+0x40>
 8000ca0:	b001      	add	sp, #4
 8000ca2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000ca6:	bf18      	it	ne
 8000ca8:	ea90 0f01 	teqne	r0, r1
 8000cac:	bf58      	it	pl
 8000cae:	ebb2 0003 	subspl.w	r0, r2, r3
 8000cb2:	bf88      	it	hi
 8000cb4:	17c8      	asrhi	r0, r1, #31
 8000cb6:	bf38      	it	cc
 8000cb8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000cbc:	bf18      	it	ne
 8000cbe:	f040 0001 	orrne.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cc8:	d102      	bne.n	8000cd0 <__cmpsf2+0x4c>
 8000cca:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000cce:	d105      	bne.n	8000cdc <__cmpsf2+0x58>
 8000cd0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000cd4:	d1e4      	bne.n	8000ca0 <__cmpsf2+0x1c>
 8000cd6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000cda:	d0e1      	beq.n	8000ca0 <__cmpsf2+0x1c>
 8000cdc:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop

08000ce4 <__aeabi_cfrcmple>:
 8000ce4:	4684      	mov	ip, r0
 8000ce6:	4608      	mov	r0, r1
 8000ce8:	4661      	mov	r1, ip
 8000cea:	e7ff      	b.n	8000cec <__aeabi_cfcmpeq>

08000cec <__aeabi_cfcmpeq>:
 8000cec:	b50f      	push	{r0, r1, r2, r3, lr}
 8000cee:	f7ff ffc9 	bl	8000c84 <__cmpsf2>
 8000cf2:	2800      	cmp	r0, #0
 8000cf4:	bf48      	it	mi
 8000cf6:	f110 0f00 	cmnmi.w	r0, #0
 8000cfa:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000cfc <__aeabi_fcmpeq>:
 8000cfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d00:	f7ff fff4 	bl	8000cec <__aeabi_cfcmpeq>
 8000d04:	bf0c      	ite	eq
 8000d06:	2001      	moveq	r0, #1
 8000d08:	2000      	movne	r0, #0
 8000d0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d0e:	bf00      	nop

08000d10 <__aeabi_fcmplt>:
 8000d10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d14:	f7ff ffea 	bl	8000cec <__aeabi_cfcmpeq>
 8000d18:	bf34      	ite	cc
 8000d1a:	2001      	movcc	r0, #1
 8000d1c:	2000      	movcs	r0, #0
 8000d1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d22:	bf00      	nop

08000d24 <__aeabi_fcmple>:
 8000d24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d28:	f7ff ffe0 	bl	8000cec <__aeabi_cfcmpeq>
 8000d2c:	bf94      	ite	ls
 8000d2e:	2001      	movls	r0, #1
 8000d30:	2000      	movhi	r0, #0
 8000d32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d36:	bf00      	nop

08000d38 <__aeabi_fcmpge>:
 8000d38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d3c:	f7ff ffd2 	bl	8000ce4 <__aeabi_cfrcmple>
 8000d40:	bf94      	ite	ls
 8000d42:	2001      	movls	r0, #1
 8000d44:	2000      	movhi	r0, #0
 8000d46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d4a:	bf00      	nop

08000d4c <__aeabi_fcmpgt>:
 8000d4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d50:	f7ff ffc8 	bl	8000ce4 <__aeabi_cfrcmple>
 8000d54:	bf34      	ite	cc
 8000d56:	2001      	movcc	r0, #1
 8000d58:	2000      	movcs	r0, #0
 8000d5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d5e:	bf00      	nop

08000d60 <__aeabi_f2iz>:
 8000d60:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d64:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000d68:	d30f      	bcc.n	8000d8a <__aeabi_f2iz+0x2a>
 8000d6a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000d6e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d72:	d90d      	bls.n	8000d90 <__aeabi_f2iz+0x30>
 8000d74:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d78:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000d7c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000d80:	fa23 f002 	lsr.w	r0, r3, r2
 8000d84:	bf18      	it	ne
 8000d86:	4240      	negne	r0, r0
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr
 8000d90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000d94:	d101      	bne.n	8000d9a <__aeabi_f2iz+0x3a>
 8000d96:	0242      	lsls	r2, r0, #9
 8000d98:	d105      	bne.n	8000da6 <__aeabi_f2iz+0x46>
 8000d9a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000d9e:	bf08      	it	eq
 8000da0:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000da4:	4770      	bx	lr
 8000da6:	f04f 0000 	mov.w	r0, #0
 8000daa:	4770      	bx	lr

08000dac <__aeabi_f2uiz>:
 8000dac:	0042      	lsls	r2, r0, #1
 8000dae:	d20e      	bcs.n	8000dce <__aeabi_f2uiz+0x22>
 8000db0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000db4:	d30b      	bcc.n	8000dce <__aeabi_f2uiz+0x22>
 8000db6:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000dba:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000dbe:	d409      	bmi.n	8000dd4 <__aeabi_f2uiz+0x28>
 8000dc0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000dc4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000dc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000dcc:	4770      	bx	lr
 8000dce:	f04f 0000 	mov.w	r0, #0
 8000dd2:	4770      	bx	lr
 8000dd4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000dd8:	d101      	bne.n	8000dde <__aeabi_f2uiz+0x32>
 8000dda:	0242      	lsls	r2, r0, #9
 8000ddc:	d102      	bne.n	8000de4 <__aeabi_f2uiz+0x38>
 8000dde:	f04f 30ff 	mov.w	r0, #4294967295
 8000de2:	4770      	bx	lr
 8000de4:	f04f 0000 	mov.w	r0, #0
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop

08000dec <MAX6675_Init>:

GPIO_TypeDef *MAX6675_CS_PORT;
uint16_t MAX6675_CS_PIN;
static SPI_HandleTypeDef *max6675_hspi;

void MAX6675_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_PORT, uint16_t CS_PIN) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	4613      	mov	r3, r2
 8000df8:	80fb      	strh	r3, [r7, #6]
    max6675_hspi = hspi;
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000e24 <MAX6675_Init+0x38>)
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	6013      	str	r3, [r2, #0]
    MAX6675_CS_PORT = CS_PORT;
 8000e00:	4a09      	ldr	r2, [pc, #36]	@ (8000e28 <MAX6675_Init+0x3c>)
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	6013      	str	r3, [r2, #0]
    MAX6675_CS_PIN = CS_PIN;
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <MAX6675_Init+0x40>)
 8000e08:	88fb      	ldrh	r3, [r7, #6]
 8000e0a:	8013      	strh	r3, [r2, #0]
    HAL_GPIO_WritePin(MAX6675_CS_PORT, MAX6675_CS_PIN, GPIO_PIN_SET);
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <MAX6675_Init+0x3c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <MAX6675_Init+0x40>)
 8000e12:	8811      	ldrh	r1, [r2, #0]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fd95 	bl	8002946 <HAL_GPIO_WritePin>
}
 8000e1c:	bf00      	nop
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	2000003c 	.word	0x2000003c
 8000e28:	20000034 	.word	0x20000034
 8000e2c:	20000038 	.word	0x20000038

08000e30 <MAX6675_ReadTemperature>:

float MAX6675_ReadTemperature(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
    uint8_t data[2] = {0};
 8000e36:	2300      	movs	r3, #0
 8000e38:	80bb      	strh	r3, [r7, #4]
    uint16_t raw_value;
    float temperature;

    HAL_GPIO_WritePin(MAX6675_CS_PORT, MAX6675_CS_PIN, GPIO_PIN_RESET);
 8000e3a:	4b23      	ldr	r3, [pc, #140]	@ (8000ec8 <MAX6675_ReadTemperature+0x98>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a23      	ldr	r2, [pc, #140]	@ (8000ecc <MAX6675_ReadTemperature+0x9c>)
 8000e40:	8811      	ldrh	r1, [r2, #0]
 8000e42:	2200      	movs	r2, #0
 8000e44:	4618      	mov	r0, r3
 8000e46:	f001 fd7e 	bl	8002946 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f001 fa36 	bl	80022bc <HAL_Delay>
    HAL_SPI_Receive(max6675_hspi, data, 2, HAL_MAX_DELAY);
 8000e50:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed0 <MAX6675_ReadTemperature+0xa0>)
 8000e52:	6818      	ldr	r0, [r3, #0]
 8000e54:	1d39      	adds	r1, r7, #4
 8000e56:	f04f 33ff 	mov.w	r3, #4294967295
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	f002 fa1e 	bl	800329c <HAL_SPI_Receive>
    HAL_Delay(1);
 8000e60:	2001      	movs	r0, #1
 8000e62:	f001 fa2b 	bl	80022bc <HAL_Delay>
    HAL_GPIO_WritePin(MAX6675_CS_PORT, MAX6675_CS_PIN, GPIO_PIN_SET);
 8000e66:	4b18      	ldr	r3, [pc, #96]	@ (8000ec8 <MAX6675_ReadTemperature+0x98>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <MAX6675_ReadTemperature+0x9c>)
 8000e6c:	8811      	ldrh	r1, [r2, #0]
 8000e6e:	2201      	movs	r2, #1
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 fd68 	bl	8002946 <HAL_GPIO_WritePin>

    raw_value = (data[0] << 8) | data[1];
 8000e76:	793b      	ldrb	r3, [r7, #4]
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	b21a      	sxth	r2, r3
 8000e7e:	797b      	ldrb	r3, [r7, #5]
 8000e80:	b21b      	sxth	r3, r3
 8000e82:	4313      	orrs	r3, r2
 8000e84:	b21b      	sxth	r3, r3
 8000e86:	81fb      	strh	r3, [r7, #14]

    if (raw_value & 0x4) {
 8000e88:	89fb      	ldrh	r3, [r7, #14]
 8000e8a:	f003 0304 	and.w	r3, r3, #4
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MAX6675_ReadTemperature+0x66>
        return -1.0;  // Sensor no conectado
 8000e92:	4b10      	ldr	r3, [pc, #64]	@ (8000ed4 <MAX6675_ReadTemperature+0xa4>)
 8000e94:	e014      	b.n	8000ec0 <MAX6675_ReadTemperature+0x90>
    }

    raw_value >>= 3; // Descartar los 3 bits menos significativos
 8000e96:	89fb      	ldrh	r3, [r7, #14]
 8000e98:	08db      	lsrs	r3, r3, #3
 8000e9a:	81fb      	strh	r3, [r7, #14]
    temperature = raw_value * 0.25;
 8000e9c:	89fb      	ldrh	r3, [r7, #14]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fbd0 	bl	8000644 <__aeabi_i2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed8 <MAX6675_ReadTemperature+0xa8>)
 8000eaa:	f7ff f94f 	bl	800014c <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	f7ff fc2f 	bl	8000718 <__aeabi_d2f>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	60bb      	str	r3, [r7, #8]

    return temperature;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3710      	adds	r7, #16
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000034 	.word	0x20000034
 8000ecc:	20000038 	.word	0x20000038
 8000ed0:	2000003c 	.word	0x2000003c
 8000ed4:	bf800000 	.word	0xbf800000
 8000ed8:	3fd00000 	.word	0x3fd00000

08000edc <Display_PIN_EN_Assigment>:
GPIO_TypeDef *decena_port;
uint16_t decena_pin;
GPIO_TypeDef *centena_port;
uint16_t centena_pin;

void Display_PIN_EN_Assigment(GPIO_TypeDef *GPIO_enable, uint16_t PIN_enable) {
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	807b      	strh	r3, [r7, #2]
	enable_port = GPIO_enable;
 8000ee8:	4a05      	ldr	r2, [pc, #20]	@ (8000f00 <Display_PIN_EN_Assigment+0x24>)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6013      	str	r3, [r2, #0]
	enable_pin = PIN_enable;
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <Display_PIN_EN_Assigment+0x28>)
 8000ef0:	887b      	ldrh	r3, [r7, #2]
 8000ef2:	8013      	strh	r3, [r2, #0]
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	20000044 	.word	0x20000044
 8000f04:	20000048 	.word	0x20000048

08000f08 <Display_PIN_LACLK_Assigment>:

void Display_PIN_LACLK_Assigment(GPIO_TypeDef *GPIO_laclk, uint16_t PIN_laclk) {
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	807b      	strh	r3, [r7, #2]
	laclk_port = GPIO_laclk;
 8000f14:	4a05      	ldr	r2, [pc, #20]	@ (8000f2c <Display_PIN_LACLK_Assigment+0x24>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6013      	str	r3, [r2, #0]
	laclk_pin = PIN_laclk;
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <Display_PIN_LACLK_Assigment+0x28>)
 8000f1c:	887b      	ldrh	r3, [r7, #2]
 8000f1e:	8013      	strh	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	2000004c 	.word	0x2000004c
 8000f30:	20000050 	.word	0x20000050

08000f34 <Display_PIN_SHCLK_Assigment>:

void Display_PIN_SHCLK_Assigment(GPIO_TypeDef *GPIO_shclk, uint16_t PIN_shclk) {
 8000f34:	b480      	push	{r7}
 8000f36:	b083      	sub	sp, #12
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
	shclk_port = GPIO_shclk;
 8000f40:	4a05      	ldr	r2, [pc, #20]	@ (8000f58 <Display_PIN_SHCLK_Assigment+0x24>)
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	6013      	str	r3, [r2, #0]
	shclk_pin = PIN_shclk;
 8000f46:	4a05      	ldr	r2, [pc, #20]	@ (8000f5c <Display_PIN_SHCLK_Assigment+0x28>)
 8000f48:	887b      	ldrh	r3, [r7, #2]
 8000f4a:	8013      	strh	r3, [r2, #0]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bc80      	pop	{r7}
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	20000054 	.word	0x20000054
 8000f5c:	20000058 	.word	0x20000058

08000f60 <Display_PIN_RESET_Assigment>:

void Display_PIN_RESET_Assigment(GPIO_TypeDef *GPIO_reset, uint16_t PIN_reset) {
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
	reset_port = GPIO_reset;
 8000f6c:	4a05      	ldr	r2, [pc, #20]	@ (8000f84 <Display_PIN_RESET_Assigment+0x24>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
	reset_pin = PIN_reset;
 8000f72:	4a05      	ldr	r2, [pc, #20]	@ (8000f88 <Display_PIN_RESET_Assigment+0x28>)
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	8013      	strh	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	370c      	adds	r7, #12
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	2000005c 	.word	0x2000005c
 8000f88:	20000060 	.word	0x20000060

08000f8c <Display_PIN_DATA_Assigment>:

void Display_PIN_DATA_Assigment(GPIO_TypeDef *GPIO_data, uint16_t PIN_data) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	807b      	strh	r3, [r7, #2]
	data_port = GPIO_data;
 8000f98:	4a05      	ldr	r2, [pc, #20]	@ (8000fb0 <Display_PIN_DATA_Assigment+0x24>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6013      	str	r3, [r2, #0]
	data_pin = PIN_data;
 8000f9e:	4a05      	ldr	r2, [pc, #20]	@ (8000fb4 <Display_PIN_DATA_Assigment+0x28>)
 8000fa0:	887b      	ldrh	r3, [r7, #2]
 8000fa2:	8013      	strh	r3, [r2, #0]
}
 8000fa4:	bf00      	nop
 8000fa6:	370c      	adds	r7, #12
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bc80      	pop	{r7}
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000064 	.word	0x20000064
 8000fb4:	20000068 	.word	0x20000068

08000fb8 <Display_PIN_UNIDAD_Assigment>:

void Display_PIN_UNIDAD_Assigment(GPIO_TypeDef *GPIO_unidad, uint16_t PIN_unidad) {
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	807b      	strh	r3, [r7, #2]
	unidad_port = GPIO_unidad;
 8000fc4:	4a05      	ldr	r2, [pc, #20]	@ (8000fdc <Display_PIN_UNIDAD_Assigment+0x24>)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6013      	str	r3, [r2, #0]
	unidad_pin = PIN_unidad;
 8000fca:	4a05      	ldr	r2, [pc, #20]	@ (8000fe0 <Display_PIN_UNIDAD_Assigment+0x28>)
 8000fcc:	887b      	ldrh	r3, [r7, #2]
 8000fce:	8013      	strh	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	370c      	adds	r7, #12
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bc80      	pop	{r7}
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	2000006c 	.word	0x2000006c
 8000fe0:	20000070 	.word	0x20000070

08000fe4 <Display_PIN_DECENA_Assigment>:

void Display_PIN_DECENA_Assigment(GPIO_TypeDef *GPIO_decena, uint16_t PIN_decena) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	807b      	strh	r3, [r7, #2]
	decena_port = GPIO_decena;
 8000ff0:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <Display_PIN_DECENA_Assigment+0x24>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
	decena_pin = PIN_decena;
 8000ff6:	4a05      	ldr	r2, [pc, #20]	@ (800100c <Display_PIN_DECENA_Assigment+0x28>)
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	8013      	strh	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	bc80      	pop	{r7}
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000074 	.word	0x20000074
 800100c:	20000078 	.word	0x20000078

08001010 <Display_PIN_CENTENA_Assigment>:

void Display_PIN_CENTENA_Assigment(GPIO_TypeDef *GPIO_centena, uint16_t PIN_centena) {
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	807b      	strh	r3, [r7, #2]
	centena_port = GPIO_centena;
 800101c:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <Display_PIN_CENTENA_Assigment+0x24>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
	centena_pin = PIN_centena;
 8001022:	4a05      	ldr	r2, [pc, #20]	@ (8001038 <Display_PIN_CENTENA_Assigment+0x28>)
 8001024:	887b      	ldrh	r3, [r7, #2]
 8001026:	8013      	strh	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	bc80      	pop	{r7}
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	2000007c 	.word	0x2000007c
 8001038:	20000080 	.word	0x20000080

0800103c <Display_Init>:

void Display_Init(void) {
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RESET_PIN, GPIO_PIN_RESET);
 8001040:	4b0c      	ldr	r3, [pc, #48]	@ (8001074 <Display_Init+0x38>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <Display_Init+0x3c>)
 8001046:	8811      	ldrh	r1, [r2, #0]
 8001048:	2200      	movs	r2, #0
 800104a:	4618      	mov	r0, r3
 800104c:	f001 fc7b 	bl	8002946 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESET_PIN, GPIO_PIN_SET);
 8001050:	4b08      	ldr	r3, [pc, #32]	@ (8001074 <Display_Init+0x38>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a08      	ldr	r2, [pc, #32]	@ (8001078 <Display_Init+0x3c>)
 8001056:	8811      	ldrh	r1, [r2, #0]
 8001058:	2201      	movs	r2, #1
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fc73 	bl	8002946 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(ENABLE_PIN, GPIO_PIN_RESET);
 8001060:	4b06      	ldr	r3, [pc, #24]	@ (800107c <Display_Init+0x40>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a06      	ldr	r2, [pc, #24]	@ (8001080 <Display_Init+0x44>)
 8001066:	8811      	ldrh	r1, [r2, #0]
 8001068:	2200      	movs	r2, #0
 800106a:	4618      	mov	r0, r3
 800106c:	f001 fc6b 	bl	8002946 <HAL_GPIO_WritePin>
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}
 8001074:	2000005c 	.word	0x2000005c
 8001078:	20000060 	.word	0x20000060
 800107c:	20000044 	.word	0x20000044
 8001080:	20000048 	.word	0x20000048

08001084 <Display_SendByte>:

void Display_SendByte(uint8_t data) {
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	4603      	mov	r3, r0
 800108c:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	e022      	b.n	80010da <Display_SendByte+0x56>
        HAL_GPIO_WritePin(DATA_PIN, (data & 0x80) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001094:	4b1c      	ldr	r3, [pc, #112]	@ (8001108 <Display_SendByte+0x84>)
 8001096:	6818      	ldr	r0, [r3, #0]
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <Display_SendByte+0x88>)
 800109a:	8819      	ldrh	r1, [r3, #0]
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	43db      	mvns	r3, r3
 80010a2:	b2db      	uxtb	r3, r3
 80010a4:	09db      	lsrs	r3, r3, #7
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	461a      	mov	r2, r3
 80010aa:	f001 fc4c 	bl	8002946 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SHIFT_PIN, GPIO_PIN_SET);
 80010ae:	4b18      	ldr	r3, [pc, #96]	@ (8001110 <Display_SendByte+0x8c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a18      	ldr	r2, [pc, #96]	@ (8001114 <Display_SendByte+0x90>)
 80010b4:	8811      	ldrh	r1, [r2, #0]
 80010b6:	2201      	movs	r2, #1
 80010b8:	4618      	mov	r0, r3
 80010ba:	f001 fc44 	bl	8002946 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(SHIFT_PIN, GPIO_PIN_RESET);
 80010be:	4b14      	ldr	r3, [pc, #80]	@ (8001110 <Display_SendByte+0x8c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a14      	ldr	r2, [pc, #80]	@ (8001114 <Display_SendByte+0x90>)
 80010c4:	8811      	ldrh	r1, [r2, #0]
 80010c6:	2200      	movs	r2, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f001 fc3c 	bl	8002946 <HAL_GPIO_WritePin>
        data <<= 1;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; i++) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	3301      	adds	r3, #1
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2b07      	cmp	r3, #7
 80010de:	ddd9      	ble.n	8001094 <Display_SendByte+0x10>
    }
    HAL_GPIO_WritePin(LATCH_PIN, GPIO_PIN_SET);
 80010e0:	4b0d      	ldr	r3, [pc, #52]	@ (8001118 <Display_SendByte+0x94>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <Display_SendByte+0x98>)
 80010e6:	8811      	ldrh	r1, [r2, #0]
 80010e8:	2201      	movs	r2, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f001 fc2b 	bl	8002946 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LATCH_PIN, GPIO_PIN_RESET);
 80010f0:	4b09      	ldr	r3, [pc, #36]	@ (8001118 <Display_SendByte+0x94>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a09      	ldr	r2, [pc, #36]	@ (800111c <Display_SendByte+0x98>)
 80010f6:	8811      	ldrh	r1, [r2, #0]
 80010f8:	2200      	movs	r2, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f001 fc23 	bl	8002946 <HAL_GPIO_WritePin>
}
 8001100:	bf00      	nop
 8001102:	3710      	adds	r7, #16
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000064 	.word	0x20000064
 800110c:	20000068 	.word	0x20000068
 8001110:	20000054 	.word	0x20000054
 8001114:	20000058 	.word	0x20000058
 8001118:	2000004c 	.word	0x2000004c
 800111c:	20000050 	.word	0x20000050

08001120 <Display_Update>:

void Display_Update(uint16_t number) {
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
    current_number = number;
 800112a:	4a04      	ldr	r2, [pc, #16]	@ (800113c <Display_Update+0x1c>)
 800112c:	88fb      	ldrh	r3, [r7, #6]
 800112e:	8013      	strh	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	bc80      	pop	{r7}
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000040 	.word	0x20000040

08001140 <Display_UpdateDigit>:

void Display_UpdateDigit(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(HUNDRED_PIN, GPIO_PIN_SET);
 8001146:	4b53      	ldr	r3, [pc, #332]	@ (8001294 <Display_UpdateDigit+0x154>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4a53      	ldr	r2, [pc, #332]	@ (8001298 <Display_UpdateDigit+0x158>)
 800114c:	8811      	ldrh	r1, [r2, #0]
 800114e:	2201      	movs	r2, #1
 8001150:	4618      	mov	r0, r3
 8001152:	f001 fbf8 	bl	8002946 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(UNIT_PIN, GPIO_PIN_SET);
 8001156:	4b51      	ldr	r3, [pc, #324]	@ (800129c <Display_UpdateDigit+0x15c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a51      	ldr	r2, [pc, #324]	@ (80012a0 <Display_UpdateDigit+0x160>)
 800115c:	8811      	ldrh	r1, [r2, #0]
 800115e:	2201      	movs	r2, #1
 8001160:	4618      	mov	r0, r3
 8001162:	f001 fbf0 	bl	8002946 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TENS_PIN, GPIO_PIN_SET);
 8001166:	4b4f      	ldr	r3, [pc, #316]	@ (80012a4 <Display_UpdateDigit+0x164>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4a4f      	ldr	r2, [pc, #316]	@ (80012a8 <Display_UpdateDigit+0x168>)
 800116c:	8811      	ldrh	r1, [r2, #0]
 800116e:	2201      	movs	r2, #1
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fbe8 	bl	8002946 <HAL_GPIO_WritePin>

	uint8_t units = current_number % 10;
 8001176:	4b4d      	ldr	r3, [pc, #308]	@ (80012ac <Display_UpdateDigit+0x16c>)
 8001178:	881a      	ldrh	r2, [r3, #0]
 800117a:	4b4d      	ldr	r3, [pc, #308]	@ (80012b0 <Display_UpdateDigit+0x170>)
 800117c:	fba3 1302 	umull	r1, r3, r3, r2
 8001180:	08d9      	lsrs	r1, r3, #3
 8001182:	460b      	mov	r3, r1
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	b29b      	uxth	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]
	uint8_t tens = (current_number / 10) % 10;
 8001190:	4b46      	ldr	r3, [pc, #280]	@ (80012ac <Display_UpdateDigit+0x16c>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	4a46      	ldr	r2, [pc, #280]	@ (80012b0 <Display_UpdateDigit+0x170>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	b29a      	uxth	r2, r3
 800119e:	4b44      	ldr	r3, [pc, #272]	@ (80012b0 <Display_UpdateDigit+0x170>)
 80011a0:	fba3 1302 	umull	r1, r3, r3, r2
 80011a4:	08d9      	lsrs	r1, r3, #3
 80011a6:	460b      	mov	r3, r1
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	440b      	add	r3, r1
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	71bb      	strb	r3, [r7, #6]
	uint8_t hundreds = (current_number / 100) % 10;
 80011b4:	4b3d      	ldr	r3, [pc, #244]	@ (80012ac <Display_UpdateDigit+0x16c>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	4a3e      	ldr	r2, [pc, #248]	@ (80012b4 <Display_UpdateDigit+0x174>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	b29a      	uxth	r2, r3
 80011c2:	4b3b      	ldr	r3, [pc, #236]	@ (80012b0 <Display_UpdateDigit+0x170>)
 80011c4:	fba3 1302 	umull	r1, r3, r3, r2
 80011c8:	08d9      	lsrs	r1, r3, #3
 80011ca:	460b      	mov	r3, r1
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	440b      	add	r3, r1
 80011d0:	005b      	lsls	r3, r3, #1
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	b29b      	uxth	r3, r3
 80011d6:	717b      	strb	r3, [r7, #5]
	if(hundreds == 0 && tens == 0)
 80011d8:	797b      	ldrb	r3, [r7, #5]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d106      	bne.n	80011ec <Display_UpdateDigit+0xac>
 80011de:	79bb      	ldrb	r3, [r7, #6]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d103      	bne.n	80011ec <Display_UpdateDigit+0xac>
		cant_digitos_encendidos = UN_DIGITO;
 80011e4:	4b34      	ldr	r3, [pc, #208]	@ (80012b8 <Display_UpdateDigit+0x178>)
 80011e6:	2201      	movs	r2, #1
 80011e8:	701a      	strb	r2, [r3, #0]
 80011ea:	e009      	b.n	8001200 <Display_UpdateDigit+0xc0>
	else if(hundreds == 0)
 80011ec:	797b      	ldrb	r3, [r7, #5]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d103      	bne.n	80011fa <Display_UpdateDigit+0xba>
		cant_digitos_encendidos = DOS_DIGITOS;
 80011f2:	4b31      	ldr	r3, [pc, #196]	@ (80012b8 <Display_UpdateDigit+0x178>)
 80011f4:	2202      	movs	r2, #2
 80011f6:	701a      	strb	r2, [r3, #0]
 80011f8:	e002      	b.n	8001200 <Display_UpdateDigit+0xc0>
	else
		cant_digitos_encendidos = TRES_DIGITOS;
 80011fa:	4b2f      	ldr	r3, [pc, #188]	@ (80012b8 <Display_UpdateDigit+0x178>)
 80011fc:	2203      	movs	r2, #3
 80011fe:	701a      	strb	r2, [r3, #0]

    switch (current_digit) {
 8001200:	4b2e      	ldr	r3, [pc, #184]	@ (80012bc <Display_UpdateDigit+0x17c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b02      	cmp	r3, #2
 8001206:	d024      	beq.n	8001252 <Display_UpdateDigit+0x112>
 8001208:	2b02      	cmp	r3, #2
 800120a:	dc31      	bgt.n	8001270 <Display_UpdateDigit+0x130>
 800120c:	2b00      	cmp	r3, #0
 800120e:	d002      	beq.n	8001216 <Display_UpdateDigit+0xd6>
 8001210:	2b01      	cmp	r3, #1
 8001212:	d00f      	beq.n	8001234 <Display_UpdateDigit+0xf4>
 8001214:	e02c      	b.n	8001270 <Display_UpdateDigit+0x130>
        case UNIDAD:
        	Display_SendByte(digit_map[units]);
 8001216:	79fb      	ldrb	r3, [r7, #7]
 8001218:	4a29      	ldr	r2, [pc, #164]	@ (80012c0 <Display_UpdateDigit+0x180>)
 800121a:	5cd3      	ldrb	r3, [r2, r3]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ff31 	bl	8001084 <Display_SendByte>
            HAL_GPIO_WritePin(UNIT_PIN, GPIO_PIN_RESET);
 8001222:	4b1e      	ldr	r3, [pc, #120]	@ (800129c <Display_UpdateDigit+0x15c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a1e      	ldr	r2, [pc, #120]	@ (80012a0 <Display_UpdateDigit+0x160>)
 8001228:	8811      	ldrh	r1, [r2, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fb8a 	bl	8002946 <HAL_GPIO_WritePin>
        break;
 8001232:	e01d      	b.n	8001270 <Display_UpdateDigit+0x130>

        case DECENA:
        	Display_SendByte(digit_map[tens]);
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	4a22      	ldr	r2, [pc, #136]	@ (80012c0 <Display_UpdateDigit+0x180>)
 8001238:	5cd3      	ldrb	r3, [r2, r3]
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ff22 	bl	8001084 <Display_SendByte>
            HAL_GPIO_WritePin(TENS_PIN, GPIO_PIN_RESET);
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <Display_UpdateDigit+0x164>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a18      	ldr	r2, [pc, #96]	@ (80012a8 <Display_UpdateDigit+0x168>)
 8001246:	8811      	ldrh	r1, [r2, #0]
 8001248:	2200      	movs	r2, #0
 800124a:	4618      	mov	r0, r3
 800124c:	f001 fb7b 	bl	8002946 <HAL_GPIO_WritePin>
        break;
 8001250:	e00e      	b.n	8001270 <Display_UpdateDigit+0x130>

        case CENTENA:
        	Display_SendByte(digit_map[hundreds]);
 8001252:	797b      	ldrb	r3, [r7, #5]
 8001254:	4a1a      	ldr	r2, [pc, #104]	@ (80012c0 <Display_UpdateDigit+0x180>)
 8001256:	5cd3      	ldrb	r3, [r2, r3]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff13 	bl	8001084 <Display_SendByte>
            HAL_GPIO_WritePin(HUNDRED_PIN, GPIO_PIN_RESET);
 800125e:	4b0d      	ldr	r3, [pc, #52]	@ (8001294 <Display_UpdateDigit+0x154>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <Display_UpdateDigit+0x158>)
 8001264:	8811      	ldrh	r1, [r2, #0]
 8001266:	2200      	movs	r2, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f001 fb6c 	bl	8002946 <HAL_GPIO_WritePin>
        break;
 800126e:	bf00      	nop
    }

    current_digit = (current_digit + 1) % cant_digitos_encendidos;	// Rango ciclico 0-1-2
 8001270:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <Display_UpdateDigit+0x17c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	3301      	adds	r3, #1
 8001276:	4a10      	ldr	r2, [pc, #64]	@ (80012b8 <Display_UpdateDigit+0x178>)
 8001278:	7812      	ldrb	r2, [r2, #0]
 800127a:	fb93 f1f2 	sdiv	r1, r3, r2
 800127e:	fb01 f202 	mul.w	r2, r1, r2
 8001282:	1a9b      	subs	r3, r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <Display_UpdateDigit+0x17c>)
 8001288:	701a      	strb	r2, [r3, #0]
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000007c 	.word	0x2000007c
 8001298:	20000080 	.word	0x20000080
 800129c:	2000006c 	.word	0x2000006c
 80012a0:	20000070 	.word	0x20000070
 80012a4:	20000074 	.word	0x20000074
 80012a8:	20000078 	.word	0x20000078
 80012ac:	20000040 	.word	0x20000040
 80012b0:	cccccccd 	.word	0xcccccccd
 80012b4:	51eb851f 	.word	0x51eb851f
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000042 	.word	0x20000042
 80012c0:	08004490 	.word	0x08004490

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f000 ff95 	bl	80021f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 fb73 	bl	80019b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f000 fc8d 	bl	8001bf0 <MX_GPIO_Init>
  MX_SPI1_Init();
 80012d6:	f000 fbb5 	bl	8001a44 <MX_SPI1_Init>
  MX_TIM1_Init();
 80012da:	f000 fbeb 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80012de:	f000 fc39 	bl	8001b54 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  MAX6675_Init(&hspi1, MAX6675_CS_GPIO_Port, MAX6675_CS_Pin);	// Iniciliza el MAX6675 (termocupla)
 80012e2:	2240      	movs	r2, #64	@ 0x40
 80012e4:	4999      	ldr	r1, [pc, #612]	@ (800154c <main+0x288>)
 80012e6:	489a      	ldr	r0, [pc, #616]	@ (8001550 <main+0x28c>)
 80012e8:	f7ff fd80 	bl	8000dec <MAX6675_Init>
  temperatura_leida = MAX6675_ReadTemperature();				// Lee la temperatura por primera vez
 80012ec:	f7ff fda0 	bl	8000e30 <MAX6675_ReadTemperature>
 80012f0:	4603      	mov	r3, r0
 80012f2:	4a98      	ldr	r2, [pc, #608]	@ (8001554 <main+0x290>)
 80012f4:	6013      	str	r3, [r2, #0]

  config_HC595();	// Configura los pines del 74HC595 para poder utilizar la libreria
 80012f6:	f000 fd97 	bl	8001e28 <config_HC595>
  Display_Init();
 80012fa:	f7ff fe9f 	bl	800103c <Display_Init>
  HAL_TIM_Base_Start_IT(&htim1);
 80012fe:	4896      	ldr	r0, [pc, #600]	@ (8001558 <main+0x294>)
 8001300:	f002 fcec 	bl	8003cdc <HAL_TIM_Base_Start_IT>

  LED_grados_on();
 8001304:	2201      	movs	r2, #1
 8001306:	2102      	movs	r1, #2
 8001308:	4890      	ldr	r0, [pc, #576]	@ (800154c <main+0x288>)
 800130a:	f001 fb1c 	bl	8002946 <HAL_GPIO_WritePin>

  tiempo_coccion_segs = tiempo_coccion * 120;
 800130e:	4b93      	ldr	r3, [pc, #588]	@ (800155c <main+0x298>)
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	4613      	mov	r3, r2
 8001314:	011b      	lsls	r3, r3, #4
 8001316:	1a9b      	subs	r3, r3, r2
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	461a      	mov	r2, r3
 800131c:	4b90      	ldr	r3, [pc, #576]	@ (8001560 <main+0x29c>)
 800131e:	601a      	str	r2, [r3, #0]
  temperatura_leida_antes = temperatura_leida;
 8001320:	4b8c      	ldr	r3, [pc, #560]	@ (8001554 <main+0x290>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a8f      	ldr	r2, [pc, #572]	@ (8001564 <main+0x2a0>)
 8001326:	6013      	str	r3, [r2, #0]


  HAL_TIM_Base_Start_IT(&htim2);
 8001328:	488f      	ldr	r0, [pc, #572]	@ (8001568 <main+0x2a4>)
 800132a:	f002 fcd7 	bl	8003cdc <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(leer_temp)
 800132e:	4b8f      	ldr	r3, [pc, #572]	@ (800156c <main+0x2a8>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	f000 808c 	beq.w	8001450 <main+0x18c>
	  {
		  leer_temp = false;
 8001338:	4b8c      	ldr	r3, [pc, #560]	@ (800156c <main+0x2a8>)
 800133a:	2200      	movs	r2, #0
 800133c:	701a      	strb	r2, [r3, #0]
		  temperatura_leida = MAX6675_ReadTemperature();
 800133e:	f7ff fd77 	bl	8000e30 <MAX6675_ReadTemperature>
 8001342:	4603      	mov	r3, r0
 8001344:	4a83      	ldr	r2, [pc, #524]	@ (8001554 <main+0x290>)
 8001346:	6013      	str	r3, [r2, #0]

		  if(temperatura_leida != -1) {
 8001348:	4b82      	ldr	r3, [pc, #520]	@ (8001554 <main+0x290>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4988      	ldr	r1, [pc, #544]	@ (8001570 <main+0x2ac>)
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fcd4 	bl	8000cfc <__aeabi_fcmpeq>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d13d      	bne.n	80013d6 <main+0x112>
			  // Promedio de las ultimas 10 mediciones (buffer anillo)
			  sum -= temperature_buffer[buffer_index];				// Restar el valor mas antiguo de la suma
 800135a:	4b86      	ldr	r3, [pc, #536]	@ (8001574 <main+0x2b0>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a86      	ldr	r2, [pc, #536]	@ (8001578 <main+0x2b4>)
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	4611      	mov	r1, r2
 8001364:	4a85      	ldr	r2, [pc, #532]	@ (800157c <main+0x2b8>)
 8001366:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800136a:	4611      	mov	r1, r2
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fa27 	bl	80007c0 <__aeabi_fsub>
 8001372:	4603      	mov	r3, r0
 8001374:	461a      	mov	r2, r3
 8001376:	4b7f      	ldr	r3, [pc, #508]	@ (8001574 <main+0x2b0>)
 8001378:	601a      	str	r2, [r3, #0]
			  temperature_buffer[buffer_index] = temperatura_leida;	// Almacenar el nuevo valor en el buffer
 800137a:	4b7f      	ldr	r3, [pc, #508]	@ (8001578 <main+0x2b4>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4619      	mov	r1, r3
 8001380:	4b74      	ldr	r3, [pc, #464]	@ (8001554 <main+0x290>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a7d      	ldr	r2, [pc, #500]	@ (800157c <main+0x2b8>)
 8001386:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			  sum += temperatura_leida;								// Sumar el nuevo valor a la suma
 800138a:	4b7a      	ldr	r3, [pc, #488]	@ (8001574 <main+0x2b0>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a71      	ldr	r2, [pc, #452]	@ (8001554 <main+0x290>)
 8001390:	6812      	ldr	r2, [r2, #0]
 8001392:	4611      	mov	r1, r2
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fa15 	bl	80007c4 <__addsf3>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b75      	ldr	r3, [pc, #468]	@ (8001574 <main+0x2b0>)
 80013a0:	601a      	str	r2, [r3, #0]
			  buffer_index = (buffer_index + 1) % NUM_MEDICIONES;	// Avanzar el índice en anillo
 80013a2:	4b75      	ldr	r3, [pc, #468]	@ (8001578 <main+0x2b4>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	1c5a      	adds	r2, r3, #1
 80013a8:	4b75      	ldr	r3, [pc, #468]	@ (8001580 <main+0x2bc>)
 80013aa:	fb83 1302 	smull	r1, r3, r3, r2
 80013ae:	1059      	asrs	r1, r3, #1
 80013b0:	17d3      	asrs	r3, r2, #31
 80013b2:	1ac9      	subs	r1, r1, r3
 80013b4:	460b      	mov	r3, r1
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	440b      	add	r3, r1
 80013ba:	1ad1      	subs	r1, r2, r3
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	4b6e      	ldr	r3, [pc, #440]	@ (8001578 <main+0x2b4>)
 80013c0:	701a      	strb	r2, [r3, #0]
			  temperatura_filtrada = sum / NUM_MEDICIONES;			// Guarda el promedio
 80013c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001574 <main+0x2b0>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	496f      	ldr	r1, [pc, #444]	@ (8001584 <main+0x2c0>)
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff fbb7 	bl	8000b3c <__aeabi_fdiv>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001588 <main+0x2c4>)
 80013d4:	601a      	str	r2, [r3, #0]
		  }

		  if(tiempo_mostrar_set > 0)
 80013d6:	4b6d      	ldr	r3, [pc, #436]	@ (800158c <main+0x2c8>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	dd09      	ble.n	80013f2 <main+0x12e>
		  {
			  tiempo_mostrar_set--;
 80013de:	4b6b      	ldr	r3, [pc, #428]	@ (800158c <main+0x2c8>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	3b01      	subs	r3, #1
 80013e4:	4a69      	ldr	r2, [pc, #420]	@ (800158c <main+0x2c8>)
 80013e6:	6013      	str	r3, [r2, #0]
			  DISPLAY_toggle();
 80013e8:	2101      	movs	r1, #1
 80013ea:	4869      	ldr	r0, [pc, #420]	@ (8001590 <main+0x2cc>)
 80013ec:	f001 fac3 	bl	8002976 <HAL_GPIO_TogglePin>
 80013f0:	e02e      	b.n	8001450 <main+0x18c>
		  }
		  else if(cont_mostrar_temp > 30)
 80013f2:	4b68      	ldr	r3, [pc, #416]	@ (8001594 <main+0x2d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b1e      	cmp	r3, #30
 80013f8:	dd10      	ble.n	800141c <main+0x158>
		  {
			  DISPLAY_on();
 80013fa:	2200      	movs	r2, #0
 80013fc:	2101      	movs	r1, #1
 80013fe:	4864      	ldr	r0, [pc, #400]	@ (8001590 <main+0x2cc>)
 8001400:	f001 faa1 	bl	8002946 <HAL_GPIO_WritePin>
			  Display_Update(tiempo_coccion);
 8001404:	4b55      	ldr	r3, [pc, #340]	@ (800155c <main+0x298>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	b29b      	uxth	r3, r3
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe88 	bl	8001120 <Display_Update>
			  LED_minutos_on();
 8001410:	2200      	movs	r2, #0
 8001412:	2102      	movs	r1, #2
 8001414:	484d      	ldr	r0, [pc, #308]	@ (800154c <main+0x288>)
 8001416:	f001 fa96 	bl	8002946 <HAL_GPIO_WritePin>
 800141a:	e019      	b.n	8001450 <main+0x18c>
	  	  }
		  else
		  {
			  DISPLAY_on();
 800141c:	2200      	movs	r2, #0
 800141e:	2101      	movs	r1, #1
 8001420:	485b      	ldr	r0, [pc, #364]	@ (8001590 <main+0x2cc>)
 8001422:	f001 fa90 	bl	8002946 <HAL_GPIO_WritePin>
			  Display_Update(temperatura_filtrada);
 8001426:	4b58      	ldr	r3, [pc, #352]	@ (8001588 <main+0x2c4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff fcbe 	bl	8000dac <__aeabi_f2uiz>
 8001430:	4603      	mov	r3, r0
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fe73 	bl	8001120 <Display_Update>
			  LED_grados_on();
 800143a:	2201      	movs	r2, #1
 800143c:	2102      	movs	r1, #2
 800143e:	4843      	ldr	r0, [pc, #268]	@ (800154c <main+0x288>)
 8001440:	f001 fa81 	bl	8002946 <HAL_GPIO_WritePin>
			  cont_toques_temp = 0;
 8001444:	4b54      	ldr	r3, [pc, #336]	@ (8001598 <main+0x2d4>)
 8001446:	2200      	movs	r2, #0
 8001448:	601a      	str	r2, [r3, #0]
			  cont_toques_tiempo = 0;
 800144a:	4b54      	ldr	r3, [pc, #336]	@ (800159c <main+0x2d8>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(boton != CLEAR)
 8001450:	4b53      	ldr	r3, [pc, #332]	@ (80015a0 <main+0x2dc>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 816e 	beq.w	8001736 <main+0x472>
	  {
		  switch(boton)
 800145a:	4b51      	ldr	r3, [pc, #324]	@ (80015a0 <main+0x2dc>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b05      	cmp	r3, #5
 8001460:	f200 8169 	bhi.w	8001736 <main+0x472>
 8001464:	a201      	add	r2, pc, #4	@ (adr r2, 800146c <main+0x1a8>)
 8001466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800146a:	bf00      	nop
 800146c:	08001737 	.word	0x08001737
 8001470:	08001485 	.word	0x08001485
 8001474:	080014eb 	.word	0x080014eb
 8001478:	080015a9 	.word	0x080015a9
 800147c:	08001621 	.word	0x08001621
 8001480:	08001693 	.word	0x08001693
		  {
			  case CLEAR:
			  break;

			  case TEMP_MAS:
				  if(HAL_GPIO_ReadPin(TOUCH_TEMPMAS_GPIO_Port, TOUCH_TEMPMAS_Pin)) {
 8001484:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001488:	4841      	ldr	r0, [pc, #260]	@ (8001590 <main+0x2cc>)
 800148a:	f001 fa45 	bl	8002918 <HAL_GPIO_ReadPin>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	f000 8147 	beq.w	8001724 <main+0x460>
					  cont_toques_temp++;
 8001496:	4b40      	ldr	r3, [pc, #256]	@ (8001598 <main+0x2d4>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	3301      	adds	r3, #1
 800149c:	4a3e      	ldr	r2, [pc, #248]	@ (8001598 <main+0x2d4>)
 800149e:	6013      	str	r3, [r2, #0]
					  tiempo_mostrar_set = 10;
 80014a0:	4b3a      	ldr	r3, [pc, #232]	@ (800158c <main+0x2c8>)
 80014a2:	220a      	movs	r2, #10
 80014a4:	601a      	str	r2, [r3, #0]
					  LED_grados_on();
 80014a6:	2201      	movs	r2, #1
 80014a8:	2102      	movs	r1, #2
 80014aa:	4828      	ldr	r0, [pc, #160]	@ (800154c <main+0x288>)
 80014ac:	f001 fa4b 	bl	8002946 <HAL_GPIO_WritePin>

					  if(cont_toques_temp > 1) {
 80014b0:	4b39      	ldr	r3, [pc, #228]	@ (8001598 <main+0x2d4>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	dd0e      	ble.n	80014d6 <main+0x212>
						  if(setpoint >= MAX_TEMP)
 80014b8:	4b3a      	ldr	r3, [pc, #232]	@ (80015a4 <main+0x2e0>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80014c0:	db04      	blt.n	80014cc <main+0x208>
							  setpoint = MAX_TEMP;
 80014c2:	4b38      	ldr	r3, [pc, #224]	@ (80015a4 <main+0x2e0>)
 80014c4:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e004      	b.n	80014d6 <main+0x212>
						  else
							  setpoint += 10;
 80014cc:	4b35      	ldr	r3, [pc, #212]	@ (80015a4 <main+0x2e0>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	330a      	adds	r3, #10
 80014d2:	4a34      	ldr	r2, [pc, #208]	@ (80015a4 <main+0x2e0>)
 80014d4:	6013      	str	r3, [r2, #0]
					  }
					  Display_Update(setpoint);
 80014d6:	4b33      	ldr	r3, [pc, #204]	@ (80015a4 <main+0x2e0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	b29b      	uxth	r3, r3
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fe1f 	bl	8001120 <Display_Update>
					  boton = CLEAR;
 80014e2:	4b2f      	ldr	r3, [pc, #188]	@ (80015a0 <main+0x2dc>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
				  }

			  break;
 80014e8:	e11c      	b.n	8001724 <main+0x460>

			  case TEMP_MENOS:
				  if(HAL_GPIO_ReadPin(TOUCH_TEMPMENOS_GPIO_Port, TOUCH_TEMPMENOS_Pin)) {
 80014ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80014ee:	4817      	ldr	r0, [pc, #92]	@ (800154c <main+0x288>)
 80014f0:	f001 fa12 	bl	8002918 <HAL_GPIO_ReadPin>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8116 	beq.w	8001728 <main+0x464>
					  cont_toques_temp++;
 80014fc:	4b26      	ldr	r3, [pc, #152]	@ (8001598 <main+0x2d4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	4a25      	ldr	r2, [pc, #148]	@ (8001598 <main+0x2d4>)
 8001504:	6013      	str	r3, [r2, #0]
					  tiempo_mostrar_set = 10;
 8001506:	4b21      	ldr	r3, [pc, #132]	@ (800158c <main+0x2c8>)
 8001508:	220a      	movs	r2, #10
 800150a:	601a      	str	r2, [r3, #0]

					  LED_grados_on();
 800150c:	2201      	movs	r2, #1
 800150e:	2102      	movs	r1, #2
 8001510:	480e      	ldr	r0, [pc, #56]	@ (800154c <main+0x288>)
 8001512:	f001 fa18 	bl	8002946 <HAL_GPIO_WritePin>
					  if(cont_toques_temp > 1) {
 8001516:	4b20      	ldr	r3, [pc, #128]	@ (8001598 <main+0x2d4>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b01      	cmp	r3, #1
 800151c:	dd0c      	ble.n	8001538 <main+0x274>
						  if(setpoint <= MIN_TEMP)
 800151e:	4b21      	ldr	r3, [pc, #132]	@ (80015a4 <main+0x2e0>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	2b50      	cmp	r3, #80	@ 0x50
 8001524:	dc03      	bgt.n	800152e <main+0x26a>
							  setpoint = MIN_TEMP;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <main+0x2e0>)
 8001528:	2250      	movs	r2, #80	@ 0x50
 800152a:	601a      	str	r2, [r3, #0]
 800152c:	e004      	b.n	8001538 <main+0x274>
						  else
							  setpoint -= 10;
 800152e:	4b1d      	ldr	r3, [pc, #116]	@ (80015a4 <main+0x2e0>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	3b0a      	subs	r3, #10
 8001534:	4a1b      	ldr	r2, [pc, #108]	@ (80015a4 <main+0x2e0>)
 8001536:	6013      	str	r3, [r2, #0]
					  }
					  Display_Update(setpoint);
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <main+0x2e0>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	b29b      	uxth	r3, r3
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fdee 	bl	8001120 <Display_Update>
					  boton = CLEAR;
 8001544:	4b16      	ldr	r3, [pc, #88]	@ (80015a0 <main+0x2dc>)
 8001546:	2200      	movs	r2, #0
 8001548:	701a      	strb	r2, [r3, #0]
				  }
			  break;
 800154a:	e0ed      	b.n	8001728 <main+0x464>
 800154c:	40010c00 	.word	0x40010c00
 8001550:	20000084 	.word	0x20000084
 8001554:	2000016c 	.word	0x2000016c
 8001558:	200000dc 	.word	0x200000dc
 800155c:	20000008 	.word	0x20000008
 8001560:	2000019c 	.word	0x2000019c
 8001564:	20000170 	.word	0x20000170
 8001568:	20000124 	.word	0x20000124
 800156c:	20000198 	.word	0x20000198
 8001570:	bf800000 	.word	0xbf800000
 8001574:	20000190 	.word	0x20000190
 8001578:	2000018c 	.word	0x2000018c
 800157c:	20000178 	.word	0x20000178
 8001580:	66666667 	.word	0x66666667
 8001584:	40a00000 	.word	0x40a00000
 8001588:	20000174 	.word	0x20000174
 800158c:	200001b0 	.word	0x200001b0
 8001590:	40010800 	.word	0x40010800
 8001594:	200001b4 	.word	0x200001b4
 8001598:	200001a8 	.word	0x200001a8
 800159c:	200001ac 	.word	0x200001ac
 80015a0:	200001a5 	.word	0x200001a5
 80015a4:	20000004 	.word	0x20000004

			  case TIEMPO_MAS:
				  if(HAL_GPIO_ReadPin(TOUCH_TIEMPOMAS_GPIO_Port, TOUCH_TIEMPOMAS_Pin)) {
 80015a8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80015ac:	4891      	ldr	r0, [pc, #580]	@ (80017f4 <main+0x530>)
 80015ae:	f001 f9b3 	bl	8002918 <HAL_GPIO_ReadPin>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80b9 	beq.w	800172c <main+0x468>
					  cont_toques_tiempo++;
 80015ba:	4b8f      	ldr	r3, [pc, #572]	@ (80017f8 <main+0x534>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a8d      	ldr	r2, [pc, #564]	@ (80017f8 <main+0x534>)
 80015c2:	6013      	str	r3, [r2, #0]
					  tiempo_mostrar_set = 10;
 80015c4:	4b8d      	ldr	r3, [pc, #564]	@ (80017fc <main+0x538>)
 80015c6:	220a      	movs	r2, #10
 80015c8:	601a      	str	r2, [r3, #0]
					  LED_minutos_on();
 80015ca:	2200      	movs	r2, #0
 80015cc:	2102      	movs	r1, #2
 80015ce:	4889      	ldr	r0, [pc, #548]	@ (80017f4 <main+0x530>)
 80015d0:	f001 f9b9 	bl	8002946 <HAL_GPIO_WritePin>

					  if(cont_toques_tiempo > 1) {
 80015d4:	4b88      	ldr	r3, [pc, #544]	@ (80017f8 <main+0x534>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	2b01      	cmp	r3, #1
 80015da:	dd17      	ble.n	800160c <main+0x348>
						  if(tiempo_coccion >= MAX_TIEMPO)
 80015dc:	4b88      	ldr	r3, [pc, #544]	@ (8001800 <main+0x53c>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f5b3 7f61 	cmp.w	r3, #900	@ 0x384
 80015e4:	db04      	blt.n	80015f0 <main+0x32c>
							  tiempo_coccion = MAX_TIEMPO;
 80015e6:	4b86      	ldr	r3, [pc, #536]	@ (8001800 <main+0x53c>)
 80015e8:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	e004      	b.n	80015fa <main+0x336>
						  else
							  tiempo_coccion += 5;
 80015f0:	4b83      	ldr	r3, [pc, #524]	@ (8001800 <main+0x53c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	3305      	adds	r3, #5
 80015f6:	4a82      	ldr	r2, [pc, #520]	@ (8001800 <main+0x53c>)
 80015f8:	6013      	str	r3, [r2, #0]

						  tiempo_coccion_segs = tiempo_coccion * 120;
 80015fa:	4b81      	ldr	r3, [pc, #516]	@ (8001800 <main+0x53c>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	4613      	mov	r3, r2
 8001600:	011b      	lsls	r3, r3, #4
 8001602:	1a9b      	subs	r3, r3, r2
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	461a      	mov	r2, r3
 8001608:	4b7e      	ldr	r3, [pc, #504]	@ (8001804 <main+0x540>)
 800160a:	601a      	str	r2, [r3, #0]
					  }
					  Display_Update(tiempo_coccion);
 800160c:	4b7c      	ldr	r3, [pc, #496]	@ (8001800 <main+0x53c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	b29b      	uxth	r3, r3
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff fd84 	bl	8001120 <Display_Update>
					  boton = CLEAR;
 8001618:	4b7b      	ldr	r3, [pc, #492]	@ (8001808 <main+0x544>)
 800161a:	2200      	movs	r2, #0
 800161c:	701a      	strb	r2, [r3, #0]
				  }
			  break;
 800161e:	e085      	b.n	800172c <main+0x468>

			  case TIEMPO_MENOS:
				  if(HAL_GPIO_ReadPin(TOUCH_TIEMPOMENOS_GPIO_Port, TOUCH_TIEMPOMENOS_Pin)) {
 8001620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001624:	4873      	ldr	r0, [pc, #460]	@ (80017f4 <main+0x530>)
 8001626:	f001 f977 	bl	8002918 <HAL_GPIO_ReadPin>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d07f      	beq.n	8001730 <main+0x46c>
					  cont_toques_tiempo++;
 8001630:	4b71      	ldr	r3, [pc, #452]	@ (80017f8 <main+0x534>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	3301      	adds	r3, #1
 8001636:	4a70      	ldr	r2, [pc, #448]	@ (80017f8 <main+0x534>)
 8001638:	6013      	str	r3, [r2, #0]
					  tiempo_mostrar_set = 10;
 800163a:	4b70      	ldr	r3, [pc, #448]	@ (80017fc <main+0x538>)
 800163c:	220a      	movs	r2, #10
 800163e:	601a      	str	r2, [r3, #0]
					  LED_minutos_on();
 8001640:	2200      	movs	r2, #0
 8001642:	2102      	movs	r1, #2
 8001644:	486b      	ldr	r0, [pc, #428]	@ (80017f4 <main+0x530>)
 8001646:	f001 f97e 	bl	8002946 <HAL_GPIO_WritePin>

					  if(cont_toques_tiempo > 1) {
 800164a:	4b6b      	ldr	r3, [pc, #428]	@ (80017f8 <main+0x534>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b01      	cmp	r3, #1
 8001650:	dd15      	ble.n	800167e <main+0x3ba>
						  if(tiempo_coccion <= MIN_TIEMPO)
 8001652:	4b6b      	ldr	r3, [pc, #428]	@ (8001800 <main+0x53c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2b00      	cmp	r3, #0
 8001658:	dc03      	bgt.n	8001662 <main+0x39e>
							  tiempo_coccion = MIN_TIEMPO;
 800165a:	4b69      	ldr	r3, [pc, #420]	@ (8001800 <main+0x53c>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	e004      	b.n	800166c <main+0x3a8>
						  else
							  tiempo_coccion -= 5;
 8001662:	4b67      	ldr	r3, [pc, #412]	@ (8001800 <main+0x53c>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3b05      	subs	r3, #5
 8001668:	4a65      	ldr	r2, [pc, #404]	@ (8001800 <main+0x53c>)
 800166a:	6013      	str	r3, [r2, #0]

						  tiempo_coccion_segs = tiempo_coccion * 120;
 800166c:	4b64      	ldr	r3, [pc, #400]	@ (8001800 <main+0x53c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	4613      	mov	r3, r2
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	1a9b      	subs	r3, r3, r2
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	461a      	mov	r2, r3
 800167a:	4b62      	ldr	r3, [pc, #392]	@ (8001804 <main+0x540>)
 800167c:	601a      	str	r2, [r3, #0]
					  }
					  Display_Update(tiempo_coccion);
 800167e:	4b60      	ldr	r3, [pc, #384]	@ (8001800 <main+0x53c>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	b29b      	uxth	r3, r3
 8001684:	4618      	mov	r0, r3
 8001686:	f7ff fd4b 	bl	8001120 <Display_Update>
					  boton = CLEAR;
 800168a:	4b5f      	ldr	r3, [pc, #380]	@ (8001808 <main+0x544>)
 800168c:	2200      	movs	r2, #0
 800168e:	701a      	strb	r2, [r3, #0]
				  }
			  break;
 8001690:	e04e      	b.n	8001730 <main+0x46c>

			  case ST:
				  if(HAL_GPIO_ReadPin(TOUCH_ST_GPIO_Port, TOUCH_ST_Pin)) {
 8001692:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001696:	4857      	ldr	r0, [pc, #348]	@ (80017f4 <main+0x530>)
 8001698:	f001 f93e 	bl	8002918 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d048      	beq.n	8001734 <main+0x470>
					  tiempo_mostrar_set = 0;
 80016a2:	4b56      	ldr	r3, [pc, #344]	@ (80017fc <main+0x538>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
					  if(estado == STAND_BY || estado == TERMINANDO) {
 80016a8:	4b58      	ldr	r3, [pc, #352]	@ (800180c <main+0x548>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <main+0x3f4>
 80016b0:	4b56      	ldr	r3, [pc, #344]	@ (800180c <main+0x548>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d10e      	bne.n	80016d6 <main+0x412>
						  estado = RAMPA_SUBIDA;
 80016b8:	4b54      	ldr	r3, [pc, #336]	@ (800180c <main+0x548>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
						  LED_proceso_on();
 80016be:	2201      	movs	r2, #1
 80016c0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016c4:	484b      	ldr	r0, [pc, #300]	@ (80017f4 <main+0x530>)
 80016c6:	f001 f93e 	bl	8002946 <HAL_GPIO_WritePin>
						  CALEFACTOR_on();
 80016ca:	2201      	movs	r2, #1
 80016cc:	2101      	movs	r1, #1
 80016ce:	4849      	ldr	r0, [pc, #292]	@ (80017f4 <main+0x530>)
 80016d0:	f001 f939 	bl	8002946 <HAL_GPIO_WritePin>
 80016d4:	e013      	b.n	80016fe <main+0x43a>
					  }
					  else {
						  estado = TERMINANDO;
 80016d6:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <main+0x548>)
 80016d8:	2203      	movs	r2, #3
 80016da:	701a      	strb	r2, [r3, #0]
						  LED_proceso_off();
 80016dc:	2200      	movs	r2, #0
 80016de:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016e2:	4844      	ldr	r0, [pc, #272]	@ (80017f4 <main+0x530>)
 80016e4:	f001 f92f 	bl	8002946 <HAL_GPIO_WritePin>
						  CALEFACTOR_off();
 80016e8:	2200      	movs	r2, #0
 80016ea:	2101      	movs	r1, #1
 80016ec:	4841      	ldr	r0, [pc, #260]	@ (80017f4 <main+0x530>)
 80016ee:	f001 f92a 	bl	8002946 <HAL_GPIO_WritePin>
						  LED_proceso_off();
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80016f8:	483e      	ldr	r0, [pc, #248]	@ (80017f4 <main+0x530>)
 80016fa:	f001 f924 	bl	8002946 <HAL_GPIO_WritePin>
					  }
					  Display_Update(temperatura_filtrada);
 80016fe:	4b44      	ldr	r3, [pc, #272]	@ (8001810 <main+0x54c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff fb52 	bl	8000dac <__aeabi_f2uiz>
 8001708:	4603      	mov	r3, r0
 800170a:	b29b      	uxth	r3, r3
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fd07 	bl	8001120 <Display_Update>
					  LED_grados_on();
 8001712:	2201      	movs	r2, #1
 8001714:	2102      	movs	r1, #2
 8001716:	4837      	ldr	r0, [pc, #220]	@ (80017f4 <main+0x530>)
 8001718:	f001 f915 	bl	8002946 <HAL_GPIO_WritePin>
					  boton = CLEAR;
 800171c:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <main+0x544>)
 800171e:	2200      	movs	r2, #0
 8001720:	701a      	strb	r2, [r3, #0]
				  }
			  break;
 8001722:	e007      	b.n	8001734 <main+0x470>
			  break;
 8001724:	bf00      	nop
 8001726:	e006      	b.n	8001736 <main+0x472>
			  break;
 8001728:	bf00      	nop
 800172a:	e004      	b.n	8001736 <main+0x472>
			  break;
 800172c:	bf00      	nop
 800172e:	e002      	b.n	8001736 <main+0x472>
			  break;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <main+0x472>
			  break;
 8001734:	bf00      	nop
		  }
	  }


	  switch(estado)
 8001736:	4b35      	ldr	r3, [pc, #212]	@ (800180c <main+0x548>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b03      	cmp	r3, #3
 800173c:	f63f adf7 	bhi.w	800132e <main+0x6a>
 8001740:	a201      	add	r2, pc, #4	@ (adr r2, 8001748 <main+0x484>)
 8001742:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001746:	bf00      	nop
 8001748:	08001759 	.word	0x08001759
 800174c:	0800179b 	.word	0x0800179b
 8001750:	08001825 	.word	0x08001825
 8001754:	08001957 	.word	0x08001957
	  {
	  	  case STAND_BY:
	  		if(temperatura_filtrada > 50)
 8001758:	4b2d      	ldr	r3, [pc, #180]	@ (8001810 <main+0x54c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	492d      	ldr	r1, [pc, #180]	@ (8001814 <main+0x550>)
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff faf4 	bl	8000d4c <__aeabi_fcmpgt>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d006      	beq.n	8001778 <main+0x4b4>
			  LED_CALIENTE_on();
 800176a:	2201      	movs	r2, #1
 800176c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001770:	4820      	ldr	r0, [pc, #128]	@ (80017f4 <main+0x530>)
 8001772:	f001 f8e8 	bl	8002946 <HAL_GPIO_WritePin>
	  		else if(temperatura_filtrada < 40)
			  LED_CALIENTE_off();
	  	  break;
 8001776:	e104      	b.n	8001982 <main+0x6be>
	  		else if(temperatura_filtrada < 40)
 8001778:	4b25      	ldr	r3, [pc, #148]	@ (8001810 <main+0x54c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4926      	ldr	r1, [pc, #152]	@ (8001818 <main+0x554>)
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff fac6 	bl	8000d10 <__aeabi_fcmplt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d100      	bne.n	800178c <main+0x4c8>
	  	  break;
 800178a:	e0fa      	b.n	8001982 <main+0x6be>
			  LED_CALIENTE_off();
 800178c:	2200      	movs	r2, #0
 800178e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001792:	4818      	ldr	r0, [pc, #96]	@ (80017f4 <main+0x530>)
 8001794:	f001 f8d7 	bl	8002946 <HAL_GPIO_WritePin>
	  	  break;
 8001798:	e0f3      	b.n	8001982 <main+0x6be>

	  	  case RAMPA_SUBIDA:

	  		  if(setpoint - temperatura_filtrada < 25) {
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <main+0x558>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7ff f8c4 	bl	800092c <__aeabi_i2f>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <main+0x54c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4619      	mov	r1, r3
 80017ac:	4610      	mov	r0, r2
 80017ae:	f7ff f807 	bl	80007c0 <__aeabi_fsub>
 80017b2:	4603      	mov	r3, r0
 80017b4:	491a      	ldr	r1, [pc, #104]	@ (8001820 <main+0x55c>)
 80017b6:	4618      	mov	r0, r3
 80017b8:	f7ff faaa 	bl	8000d10 <__aeabi_fcmplt>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <main+0x50e>
	  			  CALEFACTOR_off();
 80017c2:	2200      	movs	r2, #0
 80017c4:	2101      	movs	r1, #1
 80017c6:	480b      	ldr	r0, [pc, #44]	@ (80017f4 <main+0x530>)
 80017c8:	f001 f8bd 	bl	8002946 <HAL_GPIO_WritePin>
	  			  estado = CONTROL;
 80017cc:	4b0f      	ldr	r3, [pc, #60]	@ (800180c <main+0x548>)
 80017ce:	2202      	movs	r2, #2
 80017d0:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  if(temperatura_filtrada > 50)
 80017d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001810 <main+0x54c>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	490f      	ldr	r1, [pc, #60]	@ (8001814 <main+0x550>)
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fab7 	bl	8000d4c <__aeabi_fcmpgt>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d100      	bne.n	80017e6 <main+0x522>
	  			  LED_CALIENTE_on();
	  	  break;
 80017e4:	e0cd      	b.n	8001982 <main+0x6be>
	  			  LED_CALIENTE_on();
 80017e6:	2201      	movs	r2, #1
 80017e8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80017ec:	4801      	ldr	r0, [pc, #4]	@ (80017f4 <main+0x530>)
 80017ee:	f001 f8aa 	bl	8002946 <HAL_GPIO_WritePin>
	  	  break;
 80017f2:	e0c6      	b.n	8001982 <main+0x6be>
 80017f4:	40010c00 	.word	0x40010c00
 80017f8:	200001ac 	.word	0x200001ac
 80017fc:	200001b0 	.word	0x200001b0
 8001800:	20000008 	.word	0x20000008
 8001804:	2000019c 	.word	0x2000019c
 8001808:	200001a5 	.word	0x200001a5
 800180c:	200001a4 	.word	0x200001a4
 8001810:	20000174 	.word	0x20000174
 8001814:	42480000 	.word	0x42480000
 8001818:	42200000 	.word	0x42200000
 800181c:	20000004 	.word	0x20000004
 8001820:	41c80000 	.word	0x41c80000

	  	  case CONTROL:
	  		if(temperatura_filtrada > 50)
 8001824:	4b57      	ldr	r3, [pc, #348]	@ (8001984 <main+0x6c0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4957      	ldr	r1, [pc, #348]	@ (8001988 <main+0x6c4>)
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fa8e 	bl	8000d4c <__aeabi_fcmpgt>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <main+0x57e>
	  			LED_CALIENTE_on();
 8001836:	2201      	movs	r2, #1
 8001838:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800183c:	4853      	ldr	r0, [pc, #332]	@ (800198c <main+0x6c8>)
 800183e:	f001 f882 	bl	8002946 <HAL_GPIO_WritePin>

	  		if(controlar) {
 8001842:	4b53      	ldr	r3, [pc, #332]	@ (8001990 <main+0x6cc>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b00      	cmp	r3, #0
 8001848:	f000 8099 	beq.w	800197e <main+0x6ba>
	  			int error = setpoint - temperatura_filtrada;
 800184c:	4b51      	ldr	r3, [pc, #324]	@ (8001994 <main+0x6d0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f7ff f86b 	bl	800092c <__aeabi_i2f>
 8001856:	4602      	mov	r2, r0
 8001858:	4b4a      	ldr	r3, [pc, #296]	@ (8001984 <main+0x6c0>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4619      	mov	r1, r3
 800185e:	4610      	mov	r0, r2
 8001860:	f7fe ffae 	bl	80007c0 <__aeabi_fsub>
 8001864:	4603      	mov	r3, r0
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fa7a 	bl	8000d60 <__aeabi_f2iz>
 800186c:	4603      	mov	r3, r0
 800186e:	607b      	str	r3, [r7, #4]
	  			int duty_cycle = error * KP;
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff f85b 	bl	800092c <__aeabi_i2f>
 8001876:	4603      	mov	r3, r0
 8001878:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff f8a9 	bl	80009d4 <__aeabi_fmul>
 8001882:	4603      	mov	r3, r0
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fa6b 	bl	8000d60 <__aeabi_f2iz>
 800188a:	4603      	mov	r3, r0
 800188c:	603b      	str	r3, [r7, #0]

	  			tiempo_coccion_segs--;
 800188e:	4b42      	ldr	r3, [pc, #264]	@ (8001998 <main+0x6d4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	3b01      	subs	r3, #1
 8001894:	4a40      	ldr	r2, [pc, #256]	@ (8001998 <main+0x6d4>)
 8001896:	6013      	str	r3, [r2, #0]
	  			tiempo_coccion = tiempo_coccion_segs / 120;
 8001898:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <main+0x6d4>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3f      	ldr	r2, [pc, #252]	@ (800199c <main+0x6d8>)
 800189e:	fb82 1203 	smull	r1, r2, r2, r3
 80018a2:	441a      	add	r2, r3
 80018a4:	1192      	asrs	r2, r2, #6
 80018a6:	17db      	asrs	r3, r3, #31
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	4a3d      	ldr	r2, [pc, #244]	@ (80019a0 <main+0x6dc>)
 80018ac:	6013      	str	r3, [r2, #0]
	  			if(tiempo_coccion_segs == 0) {
 80018ae:	4b3a      	ldr	r3, [pc, #232]	@ (8001998 <main+0x6d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <main+0x606>
	  				estado = TERMINANDO;
 80018b6:	4b3b      	ldr	r3, [pc, #236]	@ (80019a4 <main+0x6e0>)
 80018b8:	2203      	movs	r2, #3
 80018ba:	701a      	strb	r2, [r3, #0]
	  				LED_proceso_off();
 80018bc:	2200      	movs	r2, #0
 80018be:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80018c2:	4832      	ldr	r0, [pc, #200]	@ (800198c <main+0x6c8>)
 80018c4:	f001 f83f 	bl	8002946 <HAL_GPIO_WritePin>
 80018c8:	e027      	b.n	800191a <main+0x656>
	  			}
	  			else if(cont_duty_cycle == 0) {
 80018ca:	4b37      	ldr	r3, [pc, #220]	@ (80019a8 <main+0x6e4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d123      	bne.n	800191a <main+0x656>
					if(duty_cycle <= 0)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	dc03      	bgt.n	80018e0 <main+0x61c>
						tiempo_on_SSR = 0;
 80018d8:	4b34      	ldr	r3, [pc, #208]	@ (80019ac <main+0x6e8>)
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	e017      	b.n	8001910 <main+0x64c>
					else if(duty_cycle < 60)	// 15°C * 4.0f = 40
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80018e4:	dc03      	bgt.n	80018ee <main+0x62a>
						tiempo_on_SSR = 1;
 80018e6:	4b31      	ldr	r3, [pc, #196]	@ (80019ac <main+0x6e8>)
 80018e8:	2201      	movs	r2, #1
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	e010      	b.n	8001910 <main+0x64c>
					else if(duty_cycle < 80)	// 20°C * 4.0f = 80
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	2b4f      	cmp	r3, #79	@ 0x4f
 80018f2:	dc03      	bgt.n	80018fc <main+0x638>
						tiempo_on_SSR = 2;
 80018f4:	4b2d      	ldr	r3, [pc, #180]	@ (80019ac <main+0x6e8>)
 80018f6:	2202      	movs	r2, #2
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e009      	b.n	8001910 <main+0x64c>
					else if (duty_cycle < 100)	// 25°C * 4.0f = 100
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2b63      	cmp	r3, #99	@ 0x63
 8001900:	dc03      	bgt.n	800190a <main+0x646>
						tiempo_on_SSR = 3;
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <main+0x6e8>)
 8001904:	2203      	movs	r2, #3
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	e002      	b.n	8001910 <main+0x64c>
					else
						tiempo_on_SSR = 4;
 800190a:	4b28      	ldr	r3, [pc, #160]	@ (80019ac <main+0x6e8>)
 800190c:	2204      	movs	r2, #4
 800190e:	601a      	str	r2, [r3, #0]

					CALEFACTOR_on();
 8001910:	2201      	movs	r2, #1
 8001912:	2101      	movs	r1, #1
 8001914:	481d      	ldr	r0, [pc, #116]	@ (800198c <main+0x6c8>)
 8001916:	f001 f816 	bl	8002946 <HAL_GPIO_WritePin>
	  			}

	  			if(tiempo_on_SSR == cont_duty_cycle)
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <main+0x6e8>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	4b22      	ldr	r3, [pc, #136]	@ (80019a8 <main+0x6e4>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d104      	bne.n	8001930 <main+0x66c>
	  				CALEFACTOR_off();
 8001926:	2200      	movs	r2, #0
 8001928:	2101      	movs	r1, #1
 800192a:	4818      	ldr	r0, [pc, #96]	@ (800198c <main+0x6c8>)
 800192c:	f001 f80b 	bl	8002946 <HAL_GPIO_WritePin>

	  			cont_duty_cycle = (cont_duty_cycle + 1) % NUM_MEDICIONES;
 8001930:	4b1d      	ldr	r3, [pc, #116]	@ (80019a8 <main+0x6e4>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	1c59      	adds	r1, r3, #1
 8001936:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <main+0x6ec>)
 8001938:	fb83 2301 	smull	r2, r3, r3, r1
 800193c:	105a      	asrs	r2, r3, #1
 800193e:	17cb      	asrs	r3, r1, #31
 8001940:	1ad2      	subs	r2, r2, r3
 8001942:	4613      	mov	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	4413      	add	r3, r2
 8001948:	1aca      	subs	r2, r1, r3
 800194a:	4b17      	ldr	r3, [pc, #92]	@ (80019a8 <main+0x6e4>)
 800194c:	601a      	str	r2, [r3, #0]
	  			controlar = false;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <main+0x6cc>)
 8001950:	2200      	movs	r2, #0
 8001952:	701a      	strb	r2, [r3, #0]
	  		}
	  	  break;
 8001954:	e013      	b.n	800197e <main+0x6ba>

	  	  case TERMINANDO:
	  		  if(temperatura_filtrada < 40) {
 8001956:	4b0b      	ldr	r3, [pc, #44]	@ (8001984 <main+0x6c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4916      	ldr	r1, [pc, #88]	@ (80019b4 <main+0x6f0>)
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff f9d7 	bl	8000d10 <__aeabi_fcmplt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d100      	bne.n	800196a <main+0x6a6>
	  			  LED_CALIENTE_off();
	  			  estado = STAND_BY;
	  		  }
	  	  break;
 8001968:	e00b      	b.n	8001982 <main+0x6be>
	  			  LED_CALIENTE_off();
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001970:	4806      	ldr	r0, [pc, #24]	@ (800198c <main+0x6c8>)
 8001972:	f000 ffe8 	bl	8002946 <HAL_GPIO_WritePin>
	  			  estado = STAND_BY;
 8001976:	4b0b      	ldr	r3, [pc, #44]	@ (80019a4 <main+0x6e0>)
 8001978:	2200      	movs	r2, #0
 800197a:	701a      	strb	r2, [r3, #0]
	  	  break;
 800197c:	e001      	b.n	8001982 <main+0x6be>
	  	  break;
 800197e:	bf00      	nop
 8001980:	e4d5      	b.n	800132e <main+0x6a>
	  if(leer_temp)
 8001982:	e4d4      	b.n	800132e <main+0x6a>
 8001984:	20000174 	.word	0x20000174
 8001988:	42480000 	.word	0x42480000
 800198c:	40010c00 	.word	0x40010c00
 8001990:	20000199 	.word	0x20000199
 8001994:	20000004 	.word	0x20000004
 8001998:	2000019c 	.word	0x2000019c
 800199c:	88888889 	.word	0x88888889
 80019a0:	20000008 	.word	0x20000008
 80019a4:	200001a4 	.word	0x200001a4
 80019a8:	20000194 	.word	0x20000194
 80019ac:	200001a0 	.word	0x200001a0
 80019b0:	66666667 	.word	0x66666667
 80019b4:	42200000 	.word	0x42200000

080019b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b090      	sub	sp, #64	@ 0x40
 80019bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019be:	f107 0318 	add.w	r3, r7, #24
 80019c2:	2228      	movs	r2, #40	@ 0x28
 80019c4:	2100      	movs	r1, #0
 80019c6:	4618      	mov	r0, r3
 80019c8:	f002 fd2a 	bl	8004420 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019cc:	1d3b      	adds	r3, r7, #4
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	609a      	str	r2, [r3, #8]
 80019d6:	60da      	str	r2, [r3, #12]
 80019d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019da:	2301      	movs	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80019e4:	2300      	movs	r3, #0
 80019e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80019e8:	2301      	movs	r3, #1
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ec:	2302      	movs	r3, #2
 80019ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80019f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80019fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019fc:	f107 0318 	add.w	r3, r7, #24
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 ffe9 	bl	80029d8 <HAL_RCC_OscConfig>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d001      	beq.n	8001a10 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a0c:	f000 fa32 	bl	8001e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a10:	230f      	movs	r3, #15
 8001a12:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a14:	2302      	movs	r3, #2
 8001a16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2102      	movs	r1, #2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f001 fa56 	bl	8002edc <HAL_RCC_ClockConfig>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a36:	f000 fa1d 	bl	8001e74 <Error_Handler>
  }
}
 8001a3a:	bf00      	nop
 8001a3c:	3740      	adds	r7, #64	@ 0x40
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a48:	4b18      	ldr	r3, [pc, #96]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a4a:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <MX_SPI1_Init+0x6c>)
 8001a4c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a4e:	4b17      	ldr	r3, [pc, #92]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a54:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001a56:	4b15      	ldr	r3, [pc, #84]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a5c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a5e:	4b13      	ldr	r3, [pc, #76]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a64:	4b11      	ldr	r3, [pc, #68]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a70:	4b0e      	ldr	r3, [pc, #56]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a72:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a76:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a7a:	2238      	movs	r2, #56	@ 0x38
 8001a7c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a8a:	4b08      	ldr	r3, [pc, #32]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a90:	4b06      	ldr	r3, [pc, #24]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a92:	220a      	movs	r2, #10
 8001a94:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a96:	4805      	ldr	r0, [pc, #20]	@ (8001aac <MX_SPI1_Init+0x68>)
 8001a98:	f001 fb7c 	bl	8003194 <HAL_SPI_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001aa2:	f000 f9e7 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	20000084 	.word	0x20000084
 8001ab0:	40013000 	.word	0x40013000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aba:	f107 0308 	add.w	r3, r7, #8
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]
 8001ac4:	609a      	str	r2, [r3, #8]
 8001ac6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	463b      	mov	r3, r7
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001ad2:	4a1f      	ldr	r2, [pc, #124]	@ (8001b50 <MX_TIM1_Init+0x9c>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001ad6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001ad8:	2247      	movs	r2, #71	@ 0x47
 8001ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1b      	ldr	r3, [pc, #108]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5500-1;
 8001ae2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001ae4:	f241 527b 	movw	r2, #5499	@ 0x157b
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af0:	4b16      	ldr	r3, [pc, #88]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001af8:	2280      	movs	r2, #128	@ 0x80
 8001afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afc:	4813      	ldr	r0, [pc, #76]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001afe:	f002 f89e 	bl	8003c3e <HAL_TIM_Base_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001b08:	f000 f9b4 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b12:	f107 0308 	add.w	r3, r7, #8
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001b1a:	f002 fa21 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b24:	f000 f9a6 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b30:	463b      	mov	r3, r7
 8001b32:	4619      	mov	r1, r3
 8001b34:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <MX_TIM1_Init+0x98>)
 8001b36:	f002 fc03 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b40:	f000 f998 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b44:	bf00      	nop
 8001b46:	3718      	adds	r7, #24
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200000dc 	.word	0x200000dc
 8001b50:	40012c00 	.word	0x40012c00

08001b54 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b5a:	f107 0308 	add.w	r3, r7, #8
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	463b      	mov	r3, r7
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b72:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001b78:	4b1c      	ldr	r3, [pc, #112]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b7a:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 8001b7e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5000-1;
 8001b86:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b88:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001b8c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b94:	4b15      	ldr	r3, [pc, #84]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b9a:	4814      	ldr	r0, [pc, #80]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001b9c:	f002 f84f 	bl	8003c3e <HAL_TIM_Base_Init>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ba6:	f000 f965 	bl	8001e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001baa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001bb8:	f002 f9d2 	bl	8003f60 <HAL_TIM_ConfigClockSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001bc2:	f000 f957 	bl	8001e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bce:	463b      	mov	r3, r7
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_TIM2_Init+0x98>)
 8001bd4:	f002 fbb4 	bl	8004340 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001bde:	f000 f949 	bl	8001e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3718      	adds	r7, #24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000124 	.word	0x20000124

08001bf0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c04:	4b4c      	ldr	r3, [pc, #304]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a4b      	ldr	r2, [pc, #300]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c0a:	f043 0320 	orr.w	r3, r3, #32
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b49      	ldr	r3, [pc, #292]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0320 	and.w	r3, r3, #32
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1c:	4b46      	ldr	r3, [pc, #280]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a45      	ldr	r2, [pc, #276]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c22:	f043 0304 	orr.w	r3, r3, #4
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b43      	ldr	r3, [pc, #268]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c34:	4b40      	ldr	r3, [pc, #256]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a3f      	ldr	r2, [pc, #252]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c3a:	f043 0308 	orr.w	r3, r3, #8
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b3d      	ldr	r3, [pc, #244]	@ (8001d38 <MX_GPIO_Init+0x148>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HC595_OE_Pin|HC595_LACLK_Pin|HC595_SHCLK_Pin|HC595_DATA_Pin
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	21f7      	movs	r1, #247	@ 0xf7
 8001c50:	483a      	ldr	r0, [pc, #232]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001c52:	f000 fe78 	bl	8002946 <HAL_GPIO_WritePin>
                          |DISP_UNIDAD_Pin|DISP_DECENA_Pin|DISP_CENTENA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HC595_RESET_GPIO_Port, HC595_RESET_Pin, GPIO_PIN_SET);
 8001c56:	2201      	movs	r2, #1
 8001c58:	2108      	movs	r1, #8
 8001c5a:	4838      	ldr	r0, [pc, #224]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001c5c:	f000 fe73 	bl	8002946 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CALEFACTOR_Pin|LED_INDIC_Pin|LED_PROCESO_Pin|LED_CALIENTE_Pin
 8001c60:	2200      	movs	r2, #0
 8001c62:	f640 4143 	movw	r1, #3139	@ 0xc43
 8001c66:	4836      	ldr	r0, [pc, #216]	@ (8001d40 <MX_GPIO_Init+0x150>)
 8001c68:	f000 fe6d 	bl	8002946 <HAL_GPIO_WritePin>
                          |MAX6675_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : HC595_OE_Pin HC595_LACLK_Pin HC595_SHCLK_Pin HC595_RESET_Pin
                           HC595_DATA_Pin DISP_UNIDAD_Pin DISP_DECENA_Pin */
  GPIO_InitStruct.Pin = HC595_OE_Pin|HC595_LACLK_Pin|HC595_SHCLK_Pin|HC595_RESET_Pin
 8001c6c:	237f      	movs	r3, #127	@ 0x7f
 8001c6e:	613b      	str	r3, [r7, #16]
                          |HC595_DATA_Pin|DISP_UNIDAD_Pin|DISP_DECENA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c70:	2301      	movs	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	482e      	ldr	r0, [pc, #184]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001c84:	f000 fcc4 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : DISP_CENTENA_Pin */
  GPIO_InitStruct.Pin = DISP_CENTENA_Pin;
 8001c88:	2380      	movs	r3, #128	@ 0x80
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8001c94:	2301      	movs	r3, #1
 8001c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DISP_CENTENA_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4827      	ldr	r0, [pc, #156]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001ca0:	f000 fcb6 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : CALEFACTOR_Pin LED_INDIC_Pin LED_PROCESO_Pin LED_CALIENTE_Pin
                           MAX6675_CS_Pin */
  GPIO_InitStruct.Pin = CALEFACTOR_Pin|LED_INDIC_Pin|LED_PROCESO_Pin|LED_CALIENTE_Pin
 8001ca4:	f640 4343 	movw	r3, #3139	@ 0xc43
 8001ca8:	613b      	str	r3, [r7, #16]
                          |MAX6675_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001caa:	2301      	movs	r3, #1
 8001cac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cb2:	2302      	movs	r3, #2
 8001cb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cb6:	f107 0310 	add.w	r3, r7, #16
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4820      	ldr	r0, [pc, #128]	@ (8001d40 <MX_GPIO_Init+0x150>)
 8001cbe:	f000 fca7 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOUCH_ST_Pin TOUCH_TIEMPOMENOS_Pin TOUCH_TIEMPOMAS_Pin TOUCH_TEMPMENOS_Pin */
  GPIO_InitStruct.Pin = TOUCH_ST_Pin|TOUCH_TIEMPOMENOS_Pin|TOUCH_TIEMPOMAS_Pin|TOUCH_TEMPMENOS_Pin;
 8001cc2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8001cc6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cc8:	4b1e      	ldr	r3, [pc, #120]	@ (8001d44 <MX_GPIO_Init+0x154>)
 8001cca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	481a      	ldr	r0, [pc, #104]	@ (8001d40 <MX_GPIO_Init+0x150>)
 8001cd8:	f000 fc9a 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : TOUCH_TEMPMAS_Pin */
  GPIO_InitStruct.Pin = TOUCH_TEMPMAS_Pin;
 8001cdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ce0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001ce2:	4b18      	ldr	r3, [pc, #96]	@ (8001d44 <MX_GPIO_Init+0x154>)
 8001ce4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TOUCH_TEMPMAS_GPIO_Port, &GPIO_InitStruct);
 8001cea:	f107 0310 	add.w	r3, r7, #16
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4812      	ldr	r0, [pc, #72]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001cf2:	f000 fc8d 	bl	8002610 <HAL_GPIO_Init>

  /*Configure GPIO pin : TAPA_Pin */
  GPIO_InitStruct.Pin = TAPA_Pin;
 8001cf6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cfc:	4b11      	ldr	r3, [pc, #68]	@ (8001d44 <MX_GPIO_Init+0x154>)
 8001cfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d00:	2302      	movs	r3, #2
 8001d02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TAPA_GPIO_Port, &GPIO_InitStruct);
 8001d04:	f107 0310 	add.w	r3, r7, #16
 8001d08:	4619      	mov	r1, r3
 8001d0a:	480c      	ldr	r0, [pc, #48]	@ (8001d3c <MX_GPIO_Init+0x14c>)
 8001d0c:	f000 fc80 	bl	8002610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001d10:	2200      	movs	r2, #0
 8001d12:	2101      	movs	r1, #1
 8001d14:	2017      	movs	r0, #23
 8001d16:	f000 fbcc 	bl	80024b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d1a:	2017      	movs	r0, #23
 8001d1c:	f000 fbe5 	bl	80024ea <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2101      	movs	r1, #1
 8001d24:	2028      	movs	r0, #40	@ 0x28
 8001d26:	f000 fbc4 	bl	80024b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d2a:	2028      	movs	r0, #40	@ 0x28
 8001d2c:	f000 fbdd 	bl	80024ea <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001d30:	bf00      	nop
 8001d32:	3720      	adds	r7, #32
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010800 	.word	0x40010800
 8001d40:	40010c00 	.word	0x40010c00
 8001d44:	10110000 	.word	0x10110000

08001d48 <HAL_TIM_PeriodElapsedCallback>:


/*
 * Interrupciones por desbordamiento de timers 1 y 2
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM1) {	// Interrupcion cada 5,5ms aprox
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a12      	ldr	r2, [pc, #72]	@ (8001da0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d102      	bne.n	8001d60 <HAL_TIM_PeriodElapsedCallback+0x18>
        Display_UpdateDigit();
 8001d5a:	f7ff f9f1 	bl	8001140 <Display_UpdateDigit>
    else if(htim->Instance == TIM2) {	// Interrupcion cada 0,5s aprox
    	leer_temp = true;
    	controlar = true;
    	cont_mostrar_temp = (cont_mostrar_temp + 1) % 40;
    }
}
 8001d5e:	e01a      	b.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x4e>
    else if(htim->Instance == TIM2) {	// Interrupcion cada 0,5s aprox
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d68:	d115      	bne.n	8001d96 <HAL_TIM_PeriodElapsedCallback+0x4e>
    	leer_temp = true;
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001da4 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    	controlar = true;
 8001d70:	4b0d      	ldr	r3, [pc, #52]	@ (8001da8 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	701a      	strb	r2, [r3, #0]
    	cont_mostrar_temp = (cont_mostrar_temp + 1) % 40;
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	1c59      	adds	r1, r3, #1
 8001d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8001db0 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001d7e:	fb83 2301 	smull	r2, r3, r3, r1
 8001d82:	111a      	asrs	r2, r3, #4
 8001d84:	17cb      	asrs	r3, r1, #31
 8001d86:	1ad2      	subs	r2, r2, r3
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	1aca      	subs	r2, r1, r3
 8001d92:	4b06      	ldr	r3, [pc, #24]	@ (8001dac <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001d94:	601a      	str	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	20000198 	.word	0x20000198
 8001da8:	20000199 	.word	0x20000199
 8001dac:	200001b4 	.word	0x200001b4
 8001db0:	66666667 	.word	0x66666667

08001db4 <HAL_GPIO_EXTI_Callback>:

/*
 * Interrupciones externas
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]

    switch(GPIO_Pin) {
 8001dbe:	88fb      	ldrh	r3, [r7, #6]
 8001dc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dc4:	d019      	beq.n	8001dfa <HAL_GPIO_EXTI_Callback+0x46>
 8001dc6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001dca:	dc26      	bgt.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
 8001dcc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dd0:	d017      	beq.n	8001e02 <HAL_GPIO_EXTI_Callback+0x4e>
 8001dd2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001dd6:	dc20      	bgt.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
 8001dd8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001ddc:	d015      	beq.n	8001e0a <HAL_GPIO_EXTI_Callback+0x56>
 8001dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001de2:	dc1a      	bgt.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
 8001de4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001de8:	d003      	beq.n	8001df2 <HAL_GPIO_EXTI_Callback+0x3e>
 8001dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dee:	d010      	beq.n	8001e12 <HAL_GPIO_EXTI_Callback+0x5e>
        case TOUCH_ST_Pin: 			// TOUCH_ST
        	boton = ST;
        break;

    }
}
 8001df0:	e013      	b.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
        	boton = TEMP_MAS;
 8001df2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
        break;
 8001df8:	e00f      	b.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
        	boton= TEMP_MENOS;
 8001dfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	701a      	strb	r2, [r3, #0]
        break;
 8001e00:	e00b      	b.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
        	boton = TIEMPO_MAS;
 8001e02:	4b08      	ldr	r3, [pc, #32]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e04:	2203      	movs	r2, #3
 8001e06:	701a      	strb	r2, [r3, #0]
        break;
 8001e08:	e007      	b.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
        	boton = TIEMPO_MENOS;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	701a      	strb	r2, [r3, #0]
        break;
 8001e10:	e003      	b.n	8001e1a <HAL_GPIO_EXTI_Callback+0x66>
        	boton = ST;
 8001e12:	4b04      	ldr	r3, [pc, #16]	@ (8001e24 <HAL_GPIO_EXTI_Callback+0x70>)
 8001e14:	2205      	movs	r2, #5
 8001e16:	701a      	strb	r2, [r3, #0]
        break;
 8001e18:	bf00      	nop
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bc80      	pop	{r7}
 8001e22:	4770      	bx	lr
 8001e24:	200001a5 	.word	0x200001a5

08001e28 <config_HC595>:

void config_HC595() {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	Display_PIN_EN_Assigment(HC595_OE_GPIO_Port, HC595_OE_Pin);				// Asignacion de pines para libreria HC595
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	4810      	ldr	r0, [pc, #64]	@ (8001e70 <config_HC595+0x48>)
 8001e30:	f7ff f854 	bl	8000edc <Display_PIN_EN_Assigment>
  	Display_PIN_LACLK_Assigment(HC595_LACLK_GPIO_Port, HC595_LACLK_Pin);
 8001e34:	2102      	movs	r1, #2
 8001e36:	480e      	ldr	r0, [pc, #56]	@ (8001e70 <config_HC595+0x48>)
 8001e38:	f7ff f866 	bl	8000f08 <Display_PIN_LACLK_Assigment>
  	Display_PIN_SHCLK_Assigment(HC595_SHCLK_GPIO_Port, HC595_SHCLK_Pin);
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	480c      	ldr	r0, [pc, #48]	@ (8001e70 <config_HC595+0x48>)
 8001e40:	f7ff f878 	bl	8000f34 <Display_PIN_SHCLK_Assigment>
  	Display_PIN_RESET_Assigment(HC595_RESET_GPIO_Port, HC595_RESET_Pin);
 8001e44:	2108      	movs	r1, #8
 8001e46:	480a      	ldr	r0, [pc, #40]	@ (8001e70 <config_HC595+0x48>)
 8001e48:	f7ff f88a 	bl	8000f60 <Display_PIN_RESET_Assigment>
  	Display_PIN_DATA_Assigment(HC595_DATA_GPIO_Port, HC595_DATA_Pin);
 8001e4c:	2110      	movs	r1, #16
 8001e4e:	4808      	ldr	r0, [pc, #32]	@ (8001e70 <config_HC595+0x48>)
 8001e50:	f7ff f89c 	bl	8000f8c <Display_PIN_DATA_Assigment>
  	Display_PIN_UNIDAD_Assigment(DISP_UNIDAD_GPIO_Port, DISP_UNIDAD_Pin);
 8001e54:	2120      	movs	r1, #32
 8001e56:	4806      	ldr	r0, [pc, #24]	@ (8001e70 <config_HC595+0x48>)
 8001e58:	f7ff f8ae 	bl	8000fb8 <Display_PIN_UNIDAD_Assigment>
  	Display_PIN_DECENA_Assigment(DISP_DECENA_GPIO_Port, DISP_DECENA_Pin);
 8001e5c:	2140      	movs	r1, #64	@ 0x40
 8001e5e:	4804      	ldr	r0, [pc, #16]	@ (8001e70 <config_HC595+0x48>)
 8001e60:	f7ff f8c0 	bl	8000fe4 <Display_PIN_DECENA_Assigment>
  	Display_PIN_CENTENA_Assigment(DISP_CENTENA_GPIO_Port, DISP_CENTENA_Pin);
 8001e64:	2180      	movs	r1, #128	@ 0x80
 8001e66:	4802      	ldr	r0, [pc, #8]	@ (8001e70 <config_HC595+0x48>)
 8001e68:	f7ff f8d2 	bl	8001010 <Display_PIN_CENTENA_Assigment>
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	40010800 	.word	0x40010800

08001e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e74:	b480      	push	{r7}
 8001e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e78:	b672      	cpsid	i
}
 8001e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e7c:	bf00      	nop
 8001e7e:	e7fd      	b.n	8001e7c <Error_Handler+0x8>

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b085      	sub	sp, #20
 8001e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e86:	4b15      	ldr	r3, [pc, #84]	@ (8001edc <HAL_MspInit+0x5c>)
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	@ (8001edc <HAL_MspInit+0x5c>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6193      	str	r3, [r2, #24]
 8001e92:	4b12      	ldr	r3, [pc, #72]	@ (8001edc <HAL_MspInit+0x5c>)
 8001e94:	699b      	ldr	r3, [r3, #24]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60bb      	str	r3, [r7, #8]
 8001e9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	@ (8001edc <HAL_MspInit+0x5c>)
 8001ea0:	69db      	ldr	r3, [r3, #28]
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	@ (8001edc <HAL_MspInit+0x5c>)
 8001ea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ea8:	61d3      	str	r3, [r2, #28]
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	@ (8001edc <HAL_MspInit+0x5c>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001eb2:	607b      	str	r3, [r7, #4]
 8001eb4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee0 <HAL_MspInit+0x60>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ec2:	60fb      	str	r3, [r7, #12]
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	4a04      	ldr	r2, [pc, #16]	@ (8001ee0 <HAL_MspInit+0x60>)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr
 8001edc:	40021000 	.word	0x40021000
 8001ee0:	40010000 	.word	0x40010000

08001ee4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	@ 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a33      	ldr	r2, [pc, #204]	@ (8001fcc <HAL_SPI_MspInit+0xe8>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d15e      	bne.n	8001fc2 <HAL_SPI_MspInit+0xde>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f04:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	4a31      	ldr	r2, [pc, #196]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f0a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001f0e:	6193      	str	r3, [r2, #24]
 8001f10:	4b2f      	ldr	r3, [pc, #188]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1c:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	4a2b      	ldr	r2, [pc, #172]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f22:	f043 0304 	orr.w	r3, r3, #4
 8001f26:	6193      	str	r3, [r2, #24]
 8001f28:	4b29      	ldr	r3, [pc, #164]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f34:	4b26      	ldr	r3, [pc, #152]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	4a25      	ldr	r2, [pc, #148]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f3a:	f043 0308 	orr.w	r3, r3, #8
 8001f3e:	6193      	str	r3, [r2, #24]
 8001f40:	4b23      	ldr	r3, [pc, #140]	@ (8001fd0 <HAL_SPI_MspInit+0xec>)
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0308 	and.w	r3, r3, #8
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = MAX6675_NSS_Pin;
 8001f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f52:	2302      	movs	r3, #2
 8001f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f56:	2303      	movs	r3, #3
 8001f58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(MAX6675_NSS_GPIO_Port, &GPIO_InitStruct);
 8001f5a:	f107 0314 	add.w	r3, r7, #20
 8001f5e:	4619      	mov	r1, r3
 8001f60:	481c      	ldr	r0, [pc, #112]	@ (8001fd4 <HAL_SPI_MspInit+0xf0>)
 8001f62:	f000 fb55 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX6675_SCK_Pin|MAX6675_MOSI_Pin;
 8001f66:	2328      	movs	r3, #40	@ 0x28
 8001f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f6a:	2302      	movs	r3, #2
 8001f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4817      	ldr	r0, [pc, #92]	@ (8001fd8 <HAL_SPI_MspInit+0xf4>)
 8001f7a:	f000 fb49 	bl	8002610 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MAX6675_MISO_Pin;
 8001f7e:	2310      	movs	r3, #16
 8001f80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f82:	2300      	movs	r3, #0
 8001f84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f86:	2300      	movs	r3, #0
 8001f88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MAX6675_MISO_GPIO_Port, &GPIO_InitStruct);
 8001f8a:	f107 0314 	add.w	r3, r7, #20
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4811      	ldr	r0, [pc, #68]	@ (8001fd8 <HAL_SPI_MspInit+0xf4>)
 8001f92:	f000 fb3d 	bl	8002610 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <HAL_SPI_MspInit+0xf8>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa6:	f043 0301 	orr.w	r3, r3, #1
 8001faa:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fac:	4a0b      	ldr	r2, [pc, #44]	@ (8001fdc <HAL_SPI_MspInit+0xf8>)
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	6053      	str	r3, [r2, #4]

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	2023      	movs	r0, #35	@ 0x23
 8001fb8:	f000 fa7b 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001fbc:	2023      	movs	r0, #35	@ 0x23
 8001fbe:	f000 fa94 	bl	80024ea <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	@ 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	40010800 	.word	0x40010800
 8001fd8:	40010c00 	.word	0x40010c00
 8001fdc:	40010000 	.word	0x40010000

08001fe0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a26      	ldr	r2, [pc, #152]	@ (8002088 <HAL_TIM_Base_MspInit+0xa8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d12c      	bne.n	800204c <HAL_TIM_Base_MspInit+0x6c>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ff2:	4b26      	ldr	r3, [pc, #152]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 8001ff4:	699b      	ldr	r3, [r3, #24]
 8001ff6:	4a25      	ldr	r2, [pc, #148]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 8001ff8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ffc:	6193      	str	r3, [r2, #24]
 8001ffe:	4b23      	ldr	r3, [pc, #140]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 8002000:	699b      	ldr	r3, [r3, #24]
 8002002:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2018      	movs	r0, #24
 8002010:	f000 fa4f 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8002014:	2018      	movs	r0, #24
 8002016:	f000 fa68 	bl	80024ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	2019      	movs	r0, #25
 8002020:	f000 fa47 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8002024:	2019      	movs	r0, #25
 8002026:	f000 fa60 	bl	80024ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	201a      	movs	r0, #26
 8002030:	f000 fa3f 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8002034:	201a      	movs	r0, #26
 8002036:	f000 fa58 	bl	80024ea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	201b      	movs	r0, #27
 8002040:	f000 fa37 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002044:	201b      	movs	r0, #27
 8002046:	f000 fa50 	bl	80024ea <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 800204a:	e018      	b.n	800207e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002054:	d113      	bne.n	800207e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002056:	4b0d      	ldr	r3, [pc, #52]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	4a0c      	ldr	r2, [pc, #48]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	61d3      	str	r3, [r2, #28]
 8002062:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <HAL_TIM_Base_MspInit+0xac>)
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2102      	movs	r1, #2
 8002072:	201c      	movs	r0, #28
 8002074:	f000 fa1d 	bl	80024b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002078:	201c      	movs	r0, #28
 800207a:	f000 fa36 	bl	80024ea <HAL_NVIC_EnableIRQ>
}
 800207e:	bf00      	nop
 8002080:	3710      	adds	r7, #16
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40012c00 	.word	0x40012c00
 800208c:	40021000 	.word	0x40021000

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002094:	bf00      	nop
 8002096:	e7fd      	b.n	8002094 <NMI_Handler+0x4>

08002098 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800209c:	bf00      	nop
 800209e:	e7fd      	b.n	800209c <HardFault_Handler+0x4>

080020a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <MemManage_Handler+0x4>

080020a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ac:	bf00      	nop
 80020ae:	e7fd      	b.n	80020ac <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020bc:	bf00      	nop
 80020be:	46bd      	mov	sp, r7
 80020c0:	bc80      	pop	{r7}
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e0:	f000 f8d0 	bl	8002284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e4:	bf00      	nop
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_TEMPMAS_Pin);
 80020ec:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020f0:	f000 fc5a 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TAPA_Pin);
 80020f4:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020f8:	f000 fc56 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	bd80      	pop	{r7, pc}

08002100 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002104:	4802      	ldr	r0, [pc, #8]	@ (8002110 <TIM1_BRK_IRQHandler+0x10>)
 8002106:	f001 fe3b 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200000dc 	.word	0x200000dc

08002114 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002118:	4802      	ldr	r0, [pc, #8]	@ (8002124 <TIM1_UP_IRQHandler+0x10>)
 800211a:	f001 fe31 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	200000dc 	.word	0x200000dc

08002128 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800212c:	4802      	ldr	r0, [pc, #8]	@ (8002138 <TIM1_TRG_COM_IRQHandler+0x10>)
 800212e:	f001 fe27 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	200000dc 	.word	0x200000dc

0800213c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002140:	4802      	ldr	r0, [pc, #8]	@ (800214c <TIM1_CC_IRQHandler+0x10>)
 8002142:	f001 fe1d 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200000dc 	.word	0x200000dc

08002150 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002154:	4802      	ldr	r0, [pc, #8]	@ (8002160 <TIM2_IRQHandler+0x10>)
 8002156:	f001 fe13 	bl	8003d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800215a:	bf00      	nop
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop
 8002160:	20000124 	.word	0x20000124

08002164 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002168:	4802      	ldr	r0, [pc, #8]	@ (8002174 <SPI1_IRQHandler+0x10>)
 800216a:	f001 fb59 	bl	8003820 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	20000084 	.word	0x20000084

08002178 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(TOUCH_ST_Pin);
 800217c:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002180:	f000 fc12 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TOUCH_TIEMPOMENOS_Pin);
 8002184:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002188:	f000 fc0e 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TOUCH_TIEMPOMAS_Pin);
 800218c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002190:	f000 fc0a 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(TOUCH_TEMPMENOS_Pin);
 8002194:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002198:	f000 fc06 	bl	80029a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800219c:	bf00      	nop
 800219e:	bd80      	pop	{r7, pc}

080021a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021a4:	bf00      	nop
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr

080021ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021ac:	f7ff fff8 	bl	80021a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021b0:	480b      	ldr	r0, [pc, #44]	@ (80021e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80021b2:	490c      	ldr	r1, [pc, #48]	@ (80021e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80021b4:	4a0c      	ldr	r2, [pc, #48]	@ (80021e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80021b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80021b8:	e002      	b.n	80021c0 <LoopCopyDataInit>

080021ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80021ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80021bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80021be:	3304      	adds	r3, #4

080021c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80021c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80021c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80021c4:	d3f9      	bcc.n	80021ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80021c6:	4a09      	ldr	r2, [pc, #36]	@ (80021ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80021c8:	4c09      	ldr	r4, [pc, #36]	@ (80021f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80021ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80021cc:	e001      	b.n	80021d2 <LoopFillZerobss>

080021ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80021ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80021d0:	3204      	adds	r2, #4

080021d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80021d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80021d4:	d3fb      	bcc.n	80021ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80021d6:	f002 f92b 	bl	8004430 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80021da:	f7ff f873 	bl	80012c4 <main>
  bx lr
 80021de:	4770      	bx	lr
  ldr r0, =_sdata
 80021e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80021e4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80021e8:	080044c8 	.word	0x080044c8
  ldr r2, =_sbss
 80021ec:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80021f0:	200001bc 	.word	0x200001bc

080021f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021f4:	e7fe      	b.n	80021f4 <ADC1_2_IRQHandler>
	...

080021f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021fc:	4b08      	ldr	r3, [pc, #32]	@ (8002220 <HAL_Init+0x28>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a07      	ldr	r2, [pc, #28]	@ (8002220 <HAL_Init+0x28>)
 8002202:	f043 0310 	orr.w	r3, r3, #16
 8002206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002208:	2003      	movs	r0, #3
 800220a:	f000 f947 	bl	800249c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800220e:	200f      	movs	r0, #15
 8002210:	f000 f808 	bl	8002224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002214:	f7ff fe34 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	40022000 	.word	0x40022000

08002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800222c:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_InitTick+0x54>)
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	4b12      	ldr	r3, [pc, #72]	@ (800227c <HAL_InitTick+0x58>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	4619      	mov	r1, r3
 8002236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800223a:	fbb3 f3f1 	udiv	r3, r3, r1
 800223e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002242:	4618      	mov	r0, r3
 8002244:	f000 f95f 	bl	8002506 <HAL_SYSTICK_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e00e      	b.n	8002270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b0f      	cmp	r3, #15
 8002256:	d80a      	bhi.n	800226e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002258:	2200      	movs	r2, #0
 800225a:	6879      	ldr	r1, [r7, #4]
 800225c:	f04f 30ff 	mov.w	r0, #4294967295
 8002260:	f000 f927 	bl	80024b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002264:	4a06      	ldr	r2, [pc, #24]	@ (8002280 <HAL_InitTick+0x5c>)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
 800226c:	e000      	b.n	8002270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
}
 8002270:	4618      	mov	r0, r3
 8002272:	3708      	adds	r7, #8
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	2000000c 	.word	0x2000000c
 800227c:	20000014 	.word	0x20000014
 8002280:	20000010 	.word	0x20000010

08002284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002288:	4b05      	ldr	r3, [pc, #20]	@ (80022a0 <HAL_IncTick+0x1c>)
 800228a:	781b      	ldrb	r3, [r3, #0]
 800228c:	461a      	mov	r2, r3
 800228e:	4b05      	ldr	r3, [pc, #20]	@ (80022a4 <HAL_IncTick+0x20>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4413      	add	r3, r2
 8002294:	4a03      	ldr	r2, [pc, #12]	@ (80022a4 <HAL_IncTick+0x20>)
 8002296:	6013      	str	r3, [r2, #0]
}
 8002298:	bf00      	nop
 800229a:	46bd      	mov	sp, r7
 800229c:	bc80      	pop	{r7}
 800229e:	4770      	bx	lr
 80022a0:	20000014 	.word	0x20000014
 80022a4:	200001b8 	.word	0x200001b8

080022a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022a8:	b480      	push	{r7}
 80022aa:	af00      	add	r7, sp, #0
  return uwTick;
 80022ac:	4b02      	ldr	r3, [pc, #8]	@ (80022b8 <HAL_GetTick+0x10>)
 80022ae:	681b      	ldr	r3, [r3, #0]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bc80      	pop	{r7}
 80022b6:	4770      	bx	lr
 80022b8:	200001b8 	.word	0x200001b8

080022bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b084      	sub	sp, #16
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022c4:	f7ff fff0 	bl	80022a8 <HAL_GetTick>
 80022c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022d4:	d005      	beq.n	80022e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002300 <HAL_Delay+0x44>)
 80022d8:	781b      	ldrb	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80022e2:	bf00      	nop
 80022e4:	f7ff ffe0 	bl	80022a8 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	68fa      	ldr	r2, [r7, #12]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d8f7      	bhi.n	80022e4 <HAL_Delay+0x28>
  {
  }
}
 80022f4:	bf00      	nop
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	20000014 	.word	0x20000014

08002304 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002320:	4013      	ands	r3, r2
 8002322:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800232c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002330:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002334:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002336:	4a04      	ldr	r2, [pc, #16]	@ (8002348 <__NVIC_SetPriorityGrouping+0x44>)
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	60d3      	str	r3, [r2, #12]
}
 800233c:	bf00      	nop
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	bc80      	pop	{r7}
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	e000ed00 	.word	0xe000ed00

0800234c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <__NVIC_GetPriorityGrouping+0x18>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	f003 0307 	and.w	r3, r3, #7
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002368:	b480      	push	{r7}
 800236a:	b083      	sub	sp, #12
 800236c:	af00      	add	r7, sp, #0
 800236e:	4603      	mov	r3, r0
 8002370:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002372:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	db0b      	blt.n	8002392 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800237a:	79fb      	ldrb	r3, [r7, #7]
 800237c:	f003 021f 	and.w	r2, r3, #31
 8002380:	4906      	ldr	r1, [pc, #24]	@ (800239c <__NVIC_EnableIRQ+0x34>)
 8002382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	2001      	movs	r0, #1
 800238a:	fa00 f202 	lsl.w	r2, r0, r2
 800238e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr
 800239c:	e000e100 	.word	0xe000e100

080023a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	4603      	mov	r3, r0
 80023a8:	6039      	str	r1, [r7, #0]
 80023aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	db0a      	blt.n	80023ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	b2da      	uxtb	r2, r3
 80023b8:	490c      	ldr	r1, [pc, #48]	@ (80023ec <__NVIC_SetPriority+0x4c>)
 80023ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	440b      	add	r3, r1
 80023c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023c8:	e00a      	b.n	80023e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	4908      	ldr	r1, [pc, #32]	@ (80023f0 <__NVIC_SetPriority+0x50>)
 80023d0:	79fb      	ldrb	r3, [r7, #7]
 80023d2:	f003 030f 	and.w	r3, r3, #15
 80023d6:	3b04      	subs	r3, #4
 80023d8:	0112      	lsls	r2, r2, #4
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	440b      	add	r3, r1
 80023de:	761a      	strb	r2, [r3, #24]
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bc80      	pop	{r7}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000e100 	.word	0xe000e100
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b089      	sub	sp, #36	@ 0x24
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	f1c3 0307 	rsb	r3, r3, #7
 800240e:	2b04      	cmp	r3, #4
 8002410:	bf28      	it	cs
 8002412:	2304      	movcs	r3, #4
 8002414:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	3304      	adds	r3, #4
 800241a:	2b06      	cmp	r3, #6
 800241c:	d902      	bls.n	8002424 <NVIC_EncodePriority+0x30>
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3b03      	subs	r3, #3
 8002422:	e000      	b.n	8002426 <NVIC_EncodePriority+0x32>
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002428:	f04f 32ff 	mov.w	r2, #4294967295
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	fa02 f303 	lsl.w	r3, r2, r3
 8002432:	43da      	mvns	r2, r3
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	401a      	ands	r2, r3
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800243c:	f04f 31ff 	mov.w	r1, #4294967295
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	fa01 f303 	lsl.w	r3, r1, r3
 8002446:	43d9      	mvns	r1, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800244c:	4313      	orrs	r3, r2
         );
}
 800244e:	4618      	mov	r0, r3
 8002450:	3724      	adds	r7, #36	@ 0x24
 8002452:	46bd      	mov	sp, r7
 8002454:	bc80      	pop	{r7}
 8002456:	4770      	bx	lr

08002458 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	3b01      	subs	r3, #1
 8002464:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002468:	d301      	bcc.n	800246e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800246a:	2301      	movs	r3, #1
 800246c:	e00f      	b.n	800248e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <SysTick_Config+0x40>)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	3b01      	subs	r3, #1
 8002474:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002476:	210f      	movs	r1, #15
 8002478:	f04f 30ff 	mov.w	r0, #4294967295
 800247c:	f7ff ff90 	bl	80023a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002480:	4b05      	ldr	r3, [pc, #20]	@ (8002498 <SysTick_Config+0x40>)
 8002482:	2200      	movs	r2, #0
 8002484:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002486:	4b04      	ldr	r3, [pc, #16]	@ (8002498 <SysTick_Config+0x40>)
 8002488:	2207      	movs	r2, #7
 800248a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800248c:	2300      	movs	r3, #0
}
 800248e:	4618      	mov	r0, r3
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	e000e010 	.word	0xe000e010

0800249c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7ff ff2d 	bl	8002304 <__NVIC_SetPriorityGrouping>
}
 80024aa:	bf00      	nop
 80024ac:	3708      	adds	r7, #8
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd80      	pop	{r7, pc}

080024b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024b2:	b580      	push	{r7, lr}
 80024b4:	b086      	sub	sp, #24
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	4603      	mov	r3, r0
 80024ba:	60b9      	str	r1, [r7, #8]
 80024bc:	607a      	str	r2, [r7, #4]
 80024be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024c4:	f7ff ff42 	bl	800234c <__NVIC_GetPriorityGrouping>
 80024c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	6978      	ldr	r0, [r7, #20]
 80024d0:	f7ff ff90 	bl	80023f4 <NVIC_EncodePriority>
 80024d4:	4602      	mov	r2, r0
 80024d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024da:	4611      	mov	r1, r2
 80024dc:	4618      	mov	r0, r3
 80024de:	f7ff ff5f 	bl	80023a0 <__NVIC_SetPriority>
}
 80024e2:	bf00      	nop
 80024e4:	3718      	adds	r7, #24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b082      	sub	sp, #8
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	4603      	mov	r3, r0
 80024f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff35 	bl	8002368 <__NVIC_EnableIRQ>
}
 80024fe:	bf00      	nop
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b082      	sub	sp, #8
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f7ff ffa2 	bl	8002458 <SysTick_Config>
 8002514:	4603      	mov	r3, r0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002528:	2300      	movs	r3, #0
 800252a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b02      	cmp	r3, #2
 8002536:	d005      	beq.n	8002544 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2204      	movs	r2, #4
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e051      	b.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020e 	bic.w	r2, r2, #14
 8002552:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f022 0201 	bic.w	r2, r2, #1
 8002562:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a22      	ldr	r2, [pc, #136]	@ (80025f4 <HAL_DMA_Abort_IT+0xd4>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d029      	beq.n	80025c2 <HAL_DMA_Abort_IT+0xa2>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a21      	ldr	r2, [pc, #132]	@ (80025f8 <HAL_DMA_Abort_IT+0xd8>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_Abort_IT+0x9e>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a1f      	ldr	r2, [pc, #124]	@ (80025fc <HAL_DMA_Abort_IT+0xdc>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01a      	beq.n	80025b8 <HAL_DMA_Abort_IT+0x98>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a1e      	ldr	r2, [pc, #120]	@ (8002600 <HAL_DMA_Abort_IT+0xe0>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d012      	beq.n	80025b2 <HAL_DMA_Abort_IT+0x92>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a1c      	ldr	r2, [pc, #112]	@ (8002604 <HAL_DMA_Abort_IT+0xe4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d00a      	beq.n	80025ac <HAL_DMA_Abort_IT+0x8c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1b      	ldr	r2, [pc, #108]	@ (8002608 <HAL_DMA_Abort_IT+0xe8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_DMA_Abort_IT+0x86>
 80025a0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80025a4:	e00e      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025aa:	e00b      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025ac:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80025b0:	e008      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80025b6:	e005      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80025bc:	e002      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025be:	2310      	movs	r3, #16
 80025c0:	e000      	b.n	80025c4 <HAL_DMA_Abort_IT+0xa4>
 80025c2:	2301      	movs	r3, #1
 80025c4:	4a11      	ldr	r2, [pc, #68]	@ (800260c <HAL_DMA_Abort_IT+0xec>)
 80025c6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
    } 
  }
  return status;
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020008 	.word	0x40020008
 80025f8:	4002001c 	.word	0x4002001c
 80025fc:	40020030 	.word	0x40020030
 8002600:	40020044 	.word	0x40020044
 8002604:	40020058 	.word	0x40020058
 8002608:	4002006c 	.word	0x4002006c
 800260c:	40020000 	.word	0x40020000

08002610 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002610:	b480      	push	{r7}
 8002612:	b08b      	sub	sp, #44	@ 0x2c
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800261e:	2300      	movs	r3, #0
 8002620:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002622:	e169      	b.n	80028f8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002624:	2201      	movs	r2, #1
 8002626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	69fa      	ldr	r2, [r7, #28]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002638:	69ba      	ldr	r2, [r7, #24]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8158 	bne.w	80028f2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	4a9a      	ldr	r2, [pc, #616]	@ (80028b0 <HAL_GPIO_Init+0x2a0>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d05e      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800264c:	4a98      	ldr	r2, [pc, #608]	@ (80028b0 <HAL_GPIO_Init+0x2a0>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d875      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002652:	4a98      	ldr	r2, [pc, #608]	@ (80028b4 <HAL_GPIO_Init+0x2a4>)
 8002654:	4293      	cmp	r3, r2
 8002656:	d058      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002658:	4a96      	ldr	r2, [pc, #600]	@ (80028b4 <HAL_GPIO_Init+0x2a4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d86f      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800265e:	4a96      	ldr	r2, [pc, #600]	@ (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d052      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002664:	4a94      	ldr	r2, [pc, #592]	@ (80028b8 <HAL_GPIO_Init+0x2a8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d869      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800266a:	4a94      	ldr	r2, [pc, #592]	@ (80028bc <HAL_GPIO_Init+0x2ac>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d04c      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 8002670:	4a92      	ldr	r2, [pc, #584]	@ (80028bc <HAL_GPIO_Init+0x2ac>)
 8002672:	4293      	cmp	r3, r2
 8002674:	d863      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002676:	4a92      	ldr	r2, [pc, #584]	@ (80028c0 <HAL_GPIO_Init+0x2b0>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d046      	beq.n	800270a <HAL_GPIO_Init+0xfa>
 800267c:	4a90      	ldr	r2, [pc, #576]	@ (80028c0 <HAL_GPIO_Init+0x2b0>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d85d      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 8002682:	2b12      	cmp	r3, #18
 8002684:	d82a      	bhi.n	80026dc <HAL_GPIO_Init+0xcc>
 8002686:	2b12      	cmp	r3, #18
 8002688:	d859      	bhi.n	800273e <HAL_GPIO_Init+0x12e>
 800268a:	a201      	add	r2, pc, #4	@ (adr r2, 8002690 <HAL_GPIO_Init+0x80>)
 800268c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002690:	0800270b 	.word	0x0800270b
 8002694:	080026e5 	.word	0x080026e5
 8002698:	080026f7 	.word	0x080026f7
 800269c:	08002739 	.word	0x08002739
 80026a0:	0800273f 	.word	0x0800273f
 80026a4:	0800273f 	.word	0x0800273f
 80026a8:	0800273f 	.word	0x0800273f
 80026ac:	0800273f 	.word	0x0800273f
 80026b0:	0800273f 	.word	0x0800273f
 80026b4:	0800273f 	.word	0x0800273f
 80026b8:	0800273f 	.word	0x0800273f
 80026bc:	0800273f 	.word	0x0800273f
 80026c0:	0800273f 	.word	0x0800273f
 80026c4:	0800273f 	.word	0x0800273f
 80026c8:	0800273f 	.word	0x0800273f
 80026cc:	0800273f 	.word	0x0800273f
 80026d0:	0800273f 	.word	0x0800273f
 80026d4:	080026ed 	.word	0x080026ed
 80026d8:	08002701 	.word	0x08002701
 80026dc:	4a79      	ldr	r2, [pc, #484]	@ (80028c4 <HAL_GPIO_Init+0x2b4>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d013      	beq.n	800270a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80026e2:	e02c      	b.n	800273e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	623b      	str	r3, [r7, #32]
          break;
 80026ea:	e029      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	3304      	adds	r3, #4
 80026f2:	623b      	str	r3, [r7, #32]
          break;
 80026f4:	e024      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	3308      	adds	r3, #8
 80026fc:	623b      	str	r3, [r7, #32]
          break;
 80026fe:	e01f      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	330c      	adds	r3, #12
 8002706:	623b      	str	r3, [r7, #32]
          break;
 8002708:	e01a      	b.n	8002740 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d102      	bne.n	8002718 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002712:	2304      	movs	r3, #4
 8002714:	623b      	str	r3, [r7, #32]
          break;
 8002716:	e013      	b.n	8002740 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d105      	bne.n	800272c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002720:	2308      	movs	r3, #8
 8002722:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	611a      	str	r2, [r3, #16]
          break;
 800272a:	e009      	b.n	8002740 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800272c:	2308      	movs	r3, #8
 800272e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69fa      	ldr	r2, [r7, #28]
 8002734:	615a      	str	r2, [r3, #20]
          break;
 8002736:	e003      	b.n	8002740 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002738:	2300      	movs	r3, #0
 800273a:	623b      	str	r3, [r7, #32]
          break;
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x130>
          break;
 800273e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2bff      	cmp	r3, #255	@ 0xff
 8002744:	d801      	bhi.n	800274a <HAL_GPIO_Init+0x13a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	e001      	b.n	800274e <HAL_GPIO_Init+0x13e>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	2bff      	cmp	r3, #255	@ 0xff
 8002754:	d802      	bhi.n	800275c <HAL_GPIO_Init+0x14c>
 8002756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	e002      	b.n	8002762 <HAL_GPIO_Init+0x152>
 800275c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275e:	3b08      	subs	r3, #8
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	210f      	movs	r1, #15
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	fa01 f303 	lsl.w	r3, r1, r3
 8002770:	43db      	mvns	r3, r3
 8002772:	401a      	ands	r2, r3
 8002774:	6a39      	ldr	r1, [r7, #32]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	fa01 f303 	lsl.w	r3, r1, r3
 800277c:	431a      	orrs	r2, r3
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	f000 80b1 	beq.w	80028f2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002790:	4b4d      	ldr	r3, [pc, #308]	@ (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	4a4c      	ldr	r2, [pc, #304]	@ (80028c8 <HAL_GPIO_Init+0x2b8>)
 8002796:	f043 0301 	orr.w	r3, r3, #1
 800279a:	6193      	str	r3, [r2, #24]
 800279c:	4b4a      	ldr	r3, [pc, #296]	@ (80028c8 <HAL_GPIO_Init+0x2b8>)
 800279e:	699b      	ldr	r3, [r3, #24]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	60bb      	str	r3, [r7, #8]
 80027a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80027a8:	4a48      	ldr	r2, [pc, #288]	@ (80028cc <HAL_GPIO_Init+0x2bc>)
 80027aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ac:	089b      	lsrs	r3, r3, #2
 80027ae:	3302      	adds	r3, #2
 80027b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	f003 0303 	and.w	r3, r3, #3
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4013      	ands	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a40      	ldr	r2, [pc, #256]	@ (80028d0 <HAL_GPIO_Init+0x2c0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d013      	beq.n	80027fc <HAL_GPIO_Init+0x1ec>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	4a3f      	ldr	r2, [pc, #252]	@ (80028d4 <HAL_GPIO_Init+0x2c4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d00d      	beq.n	80027f8 <HAL_GPIO_Init+0x1e8>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a3e      	ldr	r2, [pc, #248]	@ (80028d8 <HAL_GPIO_Init+0x2c8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d007      	beq.n	80027f4 <HAL_GPIO_Init+0x1e4>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a3d      	ldr	r2, [pc, #244]	@ (80028dc <HAL_GPIO_Init+0x2cc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_GPIO_Init+0x1e0>
 80027ec:	2303      	movs	r3, #3
 80027ee:	e006      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f0:	2304      	movs	r3, #4
 80027f2:	e004      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e002      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027f8:	2301      	movs	r3, #1
 80027fa:	e000      	b.n	80027fe <HAL_GPIO_Init+0x1ee>
 80027fc:	2300      	movs	r3, #0
 80027fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002800:	f002 0203 	and.w	r2, r2, #3
 8002804:	0092      	lsls	r2, r2, #2
 8002806:	4093      	lsls	r3, r2
 8002808:	68fa      	ldr	r2, [r7, #12]
 800280a:	4313      	orrs	r3, r2
 800280c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800280e:	492f      	ldr	r1, [pc, #188]	@ (80028cc <HAL_GPIO_Init+0x2bc>)
 8002810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002812:	089b      	lsrs	r3, r3, #2
 8002814:	3302      	adds	r3, #2
 8002816:	68fa      	ldr	r2, [r7, #12]
 8002818:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d006      	beq.n	8002836 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002828:	4b2d      	ldr	r3, [pc, #180]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	492c      	ldr	r1, [pc, #176]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	608b      	str	r3, [r1, #8]
 8002834:	e006      	b.n	8002844 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002836:	4b2a      	ldr	r3, [pc, #168]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	69bb      	ldr	r3, [r7, #24]
 800283c:	43db      	mvns	r3, r3
 800283e:	4928      	ldr	r1, [pc, #160]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002840:	4013      	ands	r3, r2
 8002842:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002850:	4b23      	ldr	r3, [pc, #140]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002852:	68da      	ldr	r2, [r3, #12]
 8002854:	4922      	ldr	r1, [pc, #136]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	4313      	orrs	r3, r2
 800285a:	60cb      	str	r3, [r1, #12]
 800285c:	e006      	b.n	800286c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800285e:	4b20      	ldr	r3, [pc, #128]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002860:	68da      	ldr	r2, [r3, #12]
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	43db      	mvns	r3, r3
 8002866:	491e      	ldr	r1, [pc, #120]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002868:	4013      	ands	r3, r2
 800286a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d006      	beq.n	8002886 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002878:	4b19      	ldr	r3, [pc, #100]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4918      	ldr	r1, [pc, #96]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
 8002884:	e006      	b.n	8002894 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002886:	4b16      	ldr	r3, [pc, #88]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	43db      	mvns	r3, r3
 800288e:	4914      	ldr	r1, [pc, #80]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 8002890:	4013      	ands	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d021      	beq.n	80028e4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80028a0:	4b0f      	ldr	r3, [pc, #60]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	490e      	ldr	r1, [pc, #56]	@ (80028e0 <HAL_GPIO_Init+0x2d0>)
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	600b      	str	r3, [r1, #0]
 80028ac:	e021      	b.n	80028f2 <HAL_GPIO_Init+0x2e2>
 80028ae:	bf00      	nop
 80028b0:	10320000 	.word	0x10320000
 80028b4:	10310000 	.word	0x10310000
 80028b8:	10220000 	.word	0x10220000
 80028bc:	10210000 	.word	0x10210000
 80028c0:	10120000 	.word	0x10120000
 80028c4:	10110000 	.word	0x10110000
 80028c8:	40021000 	.word	0x40021000
 80028cc:	40010000 	.word	0x40010000
 80028d0:	40010800 	.word	0x40010800
 80028d4:	40010c00 	.word	0x40010c00
 80028d8:	40011000 	.word	0x40011000
 80028dc:	40011400 	.word	0x40011400
 80028e0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80028e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	43db      	mvns	r3, r3
 80028ec:	4909      	ldr	r1, [pc, #36]	@ (8002914 <HAL_GPIO_Init+0x304>)
 80028ee:	4013      	ands	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80028f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f4:	3301      	adds	r3, #1
 80028f6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002902:	2b00      	cmp	r3, #0
 8002904:	f47f ae8e 	bne.w	8002624 <HAL_GPIO_Init+0x14>
  }
}
 8002908:	bf00      	nop
 800290a:	bf00      	nop
 800290c:	372c      	adds	r7, #44	@ 0x2c
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr
 8002914:	40010400 	.word	0x40010400

08002918 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	460b      	mov	r3, r1
 8002922:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	689a      	ldr	r2, [r3, #8]
 8002928:	887b      	ldrh	r3, [r7, #2]
 800292a:	4013      	ands	r3, r2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d002      	beq.n	8002936 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002930:	2301      	movs	r3, #1
 8002932:	73fb      	strb	r3, [r7, #15]
 8002934:	e001      	b.n	800293a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800293a:	7bfb      	ldrb	r3, [r7, #15]
}
 800293c:	4618      	mov	r0, r3
 800293e:	3714      	adds	r7, #20
 8002940:	46bd      	mov	sp, r7
 8002942:	bc80      	pop	{r7}
 8002944:	4770      	bx	lr

08002946 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002956:	787b      	ldrb	r3, [r7, #1]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800295c:	887a      	ldrh	r2, [r7, #2]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002962:	e003      	b.n	800296c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	041a      	lsls	r2, r3, #16
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	611a      	str	r2, [r3, #16]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	bc80      	pop	{r7}
 8002974:	4770      	bx	lr

08002976 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002976:	b480      	push	{r7}
 8002978:	b085      	sub	sp, #20
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	68db      	ldr	r3, [r3, #12]
 8002986:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002988:	887a      	ldrh	r2, [r7, #2]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	041a      	lsls	r2, r3, #16
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	43d9      	mvns	r1, r3
 8002994:	887b      	ldrh	r3, [r7, #2]
 8002996:	400b      	ands	r3, r1
 8002998:	431a      	orrs	r2, r3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	611a      	str	r2, [r3, #16]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80029b2:	4b08      	ldr	r3, [pc, #32]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b4:	695a      	ldr	r2, [r3, #20]
 80029b6:	88fb      	ldrh	r3, [r7, #6]
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d006      	beq.n	80029cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029be:	4a05      	ldr	r2, [pc, #20]	@ (80029d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029c0:	88fb      	ldrh	r3, [r7, #6]
 80029c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029c4:	88fb      	ldrh	r3, [r7, #6]
 80029c6:	4618      	mov	r0, r3
 80029c8:	f7ff f9f4 	bl	8001db4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029cc:	bf00      	nop
 80029ce:	3708      	adds	r7, #8
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40010400 	.word	0x40010400

080029d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e272      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8087 	beq.w	8002b06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80029f8:	4b92      	ldr	r3, [pc, #584]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d00c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a04:	4b8f      	ldr	r3, [pc, #572]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 030c 	and.w	r3, r3, #12
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d112      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
 8002a10:	4b8c      	ldr	r3, [pc, #560]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a1c:	d10b      	bne.n	8002a36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a1e:	4b89      	ldr	r3, [pc, #548]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d06c      	beq.n	8002b04 <HAL_RCC_OscConfig+0x12c>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d168      	bne.n	8002b04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e24c      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a3e:	d106      	bne.n	8002a4e <HAL_RCC_OscConfig+0x76>
 8002a40:	4b80      	ldr	r3, [pc, #512]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a7f      	ldr	r2, [pc, #508]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	e02e      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10c      	bne.n	8002a70 <HAL_RCC_OscConfig+0x98>
 8002a56:	4b7b      	ldr	r3, [pc, #492]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a7a      	ldr	r2, [pc, #488]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a60:	6013      	str	r3, [r2, #0]
 8002a62:	4b78      	ldr	r3, [pc, #480]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a77      	ldr	r2, [pc, #476]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a68:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6c:	6013      	str	r3, [r2, #0]
 8002a6e:	e01d      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a78:	d10c      	bne.n	8002a94 <HAL_RCC_OscConfig+0xbc>
 8002a7a:	4b72      	ldr	r3, [pc, #456]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	4b6f      	ldr	r3, [pc, #444]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a6e      	ldr	r2, [pc, #440]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a90:	6013      	str	r3, [r2, #0]
 8002a92:	e00b      	b.n	8002aac <HAL_RCC_OscConfig+0xd4>
 8002a94:	4b6b      	ldr	r3, [pc, #428]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6a      	ldr	r2, [pc, #424]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002a9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a9e:	6013      	str	r3, [r2, #0]
 8002aa0:	4b68      	ldr	r3, [pc, #416]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a67      	ldr	r2, [pc, #412]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002aa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aaa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d013      	beq.n	8002adc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ab4:	f7ff fbf8 	bl	80022a8 <HAL_GetTick>
 8002ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002abc:	f7ff fbf4 	bl	80022a8 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b64      	cmp	r3, #100	@ 0x64
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e200      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ace:	4b5d      	ldr	r3, [pc, #372]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0xe4>
 8002ada:	e014      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002adc:	f7ff fbe4 	bl	80022a8 <HAL_GetTick>
 8002ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ae2:	e008      	b.n	8002af6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ae4:	f7ff fbe0 	bl	80022a8 <HAL_GetTick>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	2b64      	cmp	r3, #100	@ 0x64
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e1ec      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002af6:	4b53      	ldr	r3, [pc, #332]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x10c>
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d063      	beq.n	8002bda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b12:	4b4c      	ldr	r3, [pc, #304]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f003 030c 	and.w	r3, r3, #12
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00b      	beq.n	8002b36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b1e:	4b49      	ldr	r3, [pc, #292]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f003 030c 	and.w	r3, r3, #12
 8002b26:	2b08      	cmp	r3, #8
 8002b28:	d11c      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
 8002b2a:	4b46      	ldr	r3, [pc, #280]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d116      	bne.n	8002b64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b36:	4b43      	ldr	r3, [pc, #268]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d005      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	691b      	ldr	r3, [r3, #16]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d001      	beq.n	8002b4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e1c0      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	4939      	ldr	r1, [pc, #228]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b62:	e03a      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	691b      	ldr	r3, [r3, #16]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d020      	beq.n	8002bae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b6c:	4b36      	ldr	r3, [pc, #216]	@ (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002b6e:	2201      	movs	r2, #1
 8002b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b72:	f7ff fb99 	bl	80022a8 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fb95 	bl	80022a8 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1a1      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f003 0302 	and.w	r3, r3, #2
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d0f0      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	695b      	ldr	r3, [r3, #20]
 8002ba4:	00db      	lsls	r3, r3, #3
 8002ba6:	4927      	ldr	r1, [pc, #156]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	600b      	str	r3, [r1, #0]
 8002bac:	e015      	b.n	8002bda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bae:	4b26      	ldr	r3, [pc, #152]	@ (8002c48 <HAL_RCC_OscConfig+0x270>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7ff fb78 	bl	80022a8 <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bbc:	f7ff fb74 	bl	80022a8 <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e180      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bce:	4b1d      	ldr	r3, [pc, #116]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0308 	and.w	r3, r3, #8
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d03a      	beq.n	8002c5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d019      	beq.n	8002c22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bee:	4b17      	ldr	r3, [pc, #92]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf4:	f7ff fb58 	bl	80022a8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfc:	f7ff fb54 	bl	80022a8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e160      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f0      	beq.n	8002bfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c1a:	2001      	movs	r0, #1
 8002c1c:	f000 fa9c 	bl	8003158 <RCC_Delay>
 8002c20:	e01c      	b.n	8002c5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c22:	4b0a      	ldr	r3, [pc, #40]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c28:	f7ff fb3e 	bl	80022a8 <HAL_GetTick>
 8002c2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c2e:	e00f      	b.n	8002c50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c30:	f7ff fb3a 	bl	80022a8 <HAL_GetTick>
 8002c34:	4602      	mov	r2, r0
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	1ad3      	subs	r3, r2, r3
 8002c3a:	2b02      	cmp	r3, #2
 8002c3c:	d908      	bls.n	8002c50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e146      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	42420000 	.word	0x42420000
 8002c4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c50:	4b92      	ldr	r3, [pc, #584]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1e9      	bne.n	8002c30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	f000 80a6 	beq.w	8002db6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c6e:	4b8b      	ldr	r3, [pc, #556]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002c70:	69db      	ldr	r3, [r3, #28]
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d10d      	bne.n	8002c96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c7a:	4b88      	ldr	r3, [pc, #544]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	4a87      	ldr	r2, [pc, #540]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c84:	61d3      	str	r3, [r2, #28]
 8002c86:	4b85      	ldr	r3, [pc, #532]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002c88:	69db      	ldr	r3, [r3, #28]
 8002c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c8e:	60bb      	str	r3, [r7, #8]
 8002c90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c92:	2301      	movs	r3, #1
 8002c94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b82      	ldr	r3, [pc, #520]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c8>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d118      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ca2:	4b7f      	ldr	r3, [pc, #508]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c8>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a7e      	ldr	r2, [pc, #504]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c8>)
 8002ca8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cae:	f7ff fafb 	bl	80022a8 <HAL_GetTick>
 8002cb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cb4:	e008      	b.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cb6:	f7ff faf7 	bl	80022a8 <HAL_GetTick>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	2b64      	cmp	r3, #100	@ 0x64
 8002cc2:	d901      	bls.n	8002cc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002cc4:	2303      	movs	r3, #3
 8002cc6:	e103      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc8:	4b75      	ldr	r3, [pc, #468]	@ (8002ea0 <HAL_RCC_OscConfig+0x4c8>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d0f0      	beq.n	8002cb6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d106      	bne.n	8002cea <HAL_RCC_OscConfig+0x312>
 8002cdc:	4b6f      	ldr	r3, [pc, #444]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002cde:	6a1b      	ldr	r3, [r3, #32]
 8002ce0:	4a6e      	ldr	r2, [pc, #440]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6213      	str	r3, [r2, #32]
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10c      	bne.n	8002d0c <HAL_RCC_OscConfig+0x334>
 8002cf2:	4b6a      	ldr	r3, [pc, #424]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002cf4:	6a1b      	ldr	r3, [r3, #32]
 8002cf6:	4a69      	ldr	r2, [pc, #420]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002cf8:	f023 0301 	bic.w	r3, r3, #1
 8002cfc:	6213      	str	r3, [r2, #32]
 8002cfe:	4b67      	ldr	r3, [pc, #412]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	4a66      	ldr	r2, [pc, #408]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d04:	f023 0304 	bic.w	r3, r3, #4
 8002d08:	6213      	str	r3, [r2, #32]
 8002d0a:	e01c      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	2b05      	cmp	r3, #5
 8002d12:	d10c      	bne.n	8002d2e <HAL_RCC_OscConfig+0x356>
 8002d14:	4b61      	ldr	r3, [pc, #388]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d16:	6a1b      	ldr	r3, [r3, #32]
 8002d18:	4a60      	ldr	r2, [pc, #384]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6213      	str	r3, [r2, #32]
 8002d20:	4b5e      	ldr	r3, [pc, #376]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	4a5d      	ldr	r2, [pc, #372]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d26:	f043 0301 	orr.w	r3, r3, #1
 8002d2a:	6213      	str	r3, [r2, #32]
 8002d2c:	e00b      	b.n	8002d46 <HAL_RCC_OscConfig+0x36e>
 8002d2e:	4b5b      	ldr	r3, [pc, #364]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d30:	6a1b      	ldr	r3, [r3, #32]
 8002d32:	4a5a      	ldr	r2, [pc, #360]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d34:	f023 0301 	bic.w	r3, r3, #1
 8002d38:	6213      	str	r3, [r2, #32]
 8002d3a:	4b58      	ldr	r3, [pc, #352]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	4a57      	ldr	r2, [pc, #348]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	f023 0304 	bic.w	r3, r3, #4
 8002d44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68db      	ldr	r3, [r3, #12]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d015      	beq.n	8002d7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d4e:	f7ff faab 	bl	80022a8 <HAL_GetTick>
 8002d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d54:	e00a      	b.n	8002d6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d56:	f7ff faa7 	bl	80022a8 <HAL_GetTick>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	1ad3      	subs	r3, r2, r3
 8002d60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e0b1      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0ee      	beq.n	8002d56 <HAL_RCC_OscConfig+0x37e>
 8002d78:	e014      	b.n	8002da4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d7a:	f7ff fa95 	bl	80022a8 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d80:	e00a      	b.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d82:	f7ff fa91 	bl	80022a8 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d901      	bls.n	8002d98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e09b      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d98:	4b40      	ldr	r3, [pc, #256]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002d9a:	6a1b      	ldr	r3, [r3, #32]
 8002d9c:	f003 0302 	and.w	r3, r3, #2
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1ee      	bne.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002da4:	7dfb      	ldrb	r3, [r7, #23]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002daa:	4b3c      	ldr	r3, [pc, #240]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	4a3b      	ldr	r2, [pc, #236]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002db0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002db4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	f000 8087 	beq.w	8002ece <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dc0:	4b36      	ldr	r3, [pc, #216]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f003 030c 	and.w	r3, r3, #12
 8002dc8:	2b08      	cmp	r3, #8
 8002dca:	d061      	beq.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d146      	bne.n	8002e62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd4:	4b33      	ldr	r3, [pc, #204]	@ (8002ea4 <HAL_RCC_OscConfig+0x4cc>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7ff fa65 	bl	80022a8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002de2:	f7ff fa61 	bl	80022a8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e06d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df4:	4b29      	ldr	r3, [pc, #164]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e08:	d108      	bne.n	8002e1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e0a:	4b24      	ldr	r3, [pc, #144]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	4921      	ldr	r1, [pc, #132]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e1c:	4b1f      	ldr	r3, [pc, #124]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a19      	ldr	r1, [r3, #32]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e2c:	430b      	orrs	r3, r1
 8002e2e:	491b      	ldr	r1, [pc, #108]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ea4 <HAL_RCC_OscConfig+0x4cc>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3a:	f7ff fa35 	bl	80022a8 <HAL_GetTick>
 8002e3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e40:	e008      	b.n	8002e54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e42:	f7ff fa31 	bl	80022a8 <HAL_GetTick>
 8002e46:	4602      	mov	r2, r0
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e03d      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e54:	4b11      	ldr	r3, [pc, #68]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d0f0      	beq.n	8002e42 <HAL_RCC_OscConfig+0x46a>
 8002e60:	e035      	b.n	8002ece <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e62:	4b10      	ldr	r3, [pc, #64]	@ (8002ea4 <HAL_RCC_OscConfig+0x4cc>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7ff fa1e 	bl	80022a8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e70:	f7ff fa1a 	bl	80022a8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e026      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_OscConfig+0x4c4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x498>
 8002e8e:	e01e      	b.n	8002ece <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d107      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	e019      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
 8002ea4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed8 <HAL_RCC_OscConfig+0x500>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a1b      	ldr	r3, [r3, #32]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d106      	bne.n	8002eca <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d001      	beq.n	8002ece <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e000      	b.n	8002ed0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002ece:	2300      	movs	r3, #0
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	3718      	adds	r7, #24
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bd80      	pop	{r7, pc}
 8002ed8:	40021000 	.word	0x40021000

08002edc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d101      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e0d0      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ef0:	4b6a      	ldr	r3, [pc, #424]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0307 	and.w	r3, r3, #7
 8002ef8:	683a      	ldr	r2, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d910      	bls.n	8002f20 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efe:	4b67      	ldr	r3, [pc, #412]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f023 0207 	bic.w	r2, r3, #7
 8002f06:	4965      	ldr	r1, [pc, #404]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f0e:	4b63      	ldr	r3, [pc, #396]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d001      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e0b8      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d020      	beq.n	8002f6e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0304 	and.w	r3, r3, #4
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d005      	beq.n	8002f44 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f38:	4b59      	ldr	r3, [pc, #356]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	4a58      	ldr	r2, [pc, #352]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f42:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f003 0308 	and.w	r3, r3, #8
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d005      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f50:	4b53      	ldr	r3, [pc, #332]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a52      	ldr	r2, [pc, #328]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f56:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002f5a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f5c:	4b50      	ldr	r3, [pc, #320]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	494d      	ldr	r1, [pc, #308]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d040      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d107      	bne.n	8002f92 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f82:	4b47      	ldr	r3, [pc, #284]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d115      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e07f      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d107      	bne.n	8002faa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f9a:	4b41      	ldr	r3, [pc, #260]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d109      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e073      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002faa:	4b3d      	ldr	r3, [pc, #244]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e06b      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fba:	4b39      	ldr	r3, [pc, #228]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 0203 	bic.w	r2, r3, #3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	4936      	ldr	r1, [pc, #216]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fcc:	f7ff f96c 	bl	80022a8 <HAL_GetTick>
 8002fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd2:	e00a      	b.n	8002fea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fd4:	f7ff f968 	bl	80022a8 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e053      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fea:	4b2d      	ldr	r3, [pc, #180]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 020c 	and.w	r2, r3, #12
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d1eb      	bne.n	8002fd4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b27      	ldr	r3, [pc, #156]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0307 	and.w	r3, r3, #7
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d210      	bcs.n	800302c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b24      	ldr	r3, [pc, #144]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 0207 	bic.w	r2, r3, #7
 8003012:	4922      	ldr	r1, [pc, #136]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b20      	ldr	r3, [pc, #128]	@ (800309c <HAL_RCC_ClockConfig+0x1c0>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d001      	beq.n	800302c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e032      	b.n	8003092 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0304 	and.w	r3, r3, #4
 8003034:	2b00      	cmp	r3, #0
 8003036:	d008      	beq.n	800304a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003038:	4b19      	ldr	r3, [pc, #100]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	4916      	ldr	r1, [pc, #88]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0308 	and.w	r3, r3, #8
 8003052:	2b00      	cmp	r3, #0
 8003054:	d009      	beq.n	800306a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003056:	4b12      	ldr	r3, [pc, #72]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	691b      	ldr	r3, [r3, #16]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	490e      	ldr	r1, [pc, #56]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800306a:	f000 f821 	bl	80030b0 <HAL_RCC_GetSysClockFreq>
 800306e:	4602      	mov	r2, r0
 8003070:	4b0b      	ldr	r3, [pc, #44]	@ (80030a0 <HAL_RCC_ClockConfig+0x1c4>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	091b      	lsrs	r3, r3, #4
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	490a      	ldr	r1, [pc, #40]	@ (80030a4 <HAL_RCC_ClockConfig+0x1c8>)
 800307c:	5ccb      	ldrb	r3, [r1, r3]
 800307e:	fa22 f303 	lsr.w	r3, r2, r3
 8003082:	4a09      	ldr	r2, [pc, #36]	@ (80030a8 <HAL_RCC_ClockConfig+0x1cc>)
 8003084:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003086:	4b09      	ldr	r3, [pc, #36]	@ (80030ac <HAL_RCC_ClockConfig+0x1d0>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4618      	mov	r0, r3
 800308c:	f7ff f8ca 	bl	8002224 <HAL_InitTick>

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3710      	adds	r7, #16
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40022000 	.word	0x40022000
 80030a0:	40021000 	.word	0x40021000
 80030a4:	0800449c 	.word	0x0800449c
 80030a8:	2000000c 	.word	0x2000000c
 80030ac:	20000010 	.word	0x20000010

080030b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	60fb      	str	r3, [r7, #12]
 80030ba:	2300      	movs	r3, #0
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	2300      	movs	r3, #0
 80030c0:	617b      	str	r3, [r7, #20]
 80030c2:	2300      	movs	r3, #0
 80030c4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x94>)
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d002      	beq.n	80030e0 <HAL_RCC_GetSysClockFreq+0x30>
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d003      	beq.n	80030e6 <HAL_RCC_GetSysClockFreq+0x36>
 80030de:	e027      	b.n	8003130 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e0:	4b19      	ldr	r3, [pc, #100]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x98>)
 80030e2:	613b      	str	r3, [r7, #16]
      break;
 80030e4:	e027      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	0c9b      	lsrs	r3, r3, #18
 80030ea:	f003 030f 	and.w	r3, r3, #15
 80030ee:	4a17      	ldr	r2, [pc, #92]	@ (800314c <HAL_RCC_GetSysClockFreq+0x9c>)
 80030f0:	5cd3      	ldrb	r3, [r2, r3]
 80030f2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80030fe:	4b11      	ldr	r3, [pc, #68]	@ (8003144 <HAL_RCC_GetSysClockFreq+0x94>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	0c5b      	lsrs	r3, r3, #17
 8003104:	f003 0301 	and.w	r3, r3, #1
 8003108:	4a11      	ldr	r2, [pc, #68]	@ (8003150 <HAL_RCC_GetSysClockFreq+0xa0>)
 800310a:	5cd3      	ldrb	r3, [r2, r3]
 800310c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a0d      	ldr	r2, [pc, #52]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x98>)
 8003112:	fb03 f202 	mul.w	r2, r3, r2
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
 800311e:	e004      	b.n	800312a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a0c      	ldr	r2, [pc, #48]	@ (8003154 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003124:	fb02 f303 	mul.w	r3, r2, r3
 8003128:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	613b      	str	r3, [r7, #16]
      break;
 800312e:	e002      	b.n	8003136 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003130:	4b05      	ldr	r3, [pc, #20]	@ (8003148 <HAL_RCC_GetSysClockFreq+0x98>)
 8003132:	613b      	str	r3, [r7, #16]
      break;
 8003134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003136:	693b      	ldr	r3, [r7, #16]
}
 8003138:	4618      	mov	r0, r3
 800313a:	371c      	adds	r7, #28
 800313c:	46bd      	mov	sp, r7
 800313e:	bc80      	pop	{r7}
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	40021000 	.word	0x40021000
 8003148:	007a1200 	.word	0x007a1200
 800314c:	080044ac 	.word	0x080044ac
 8003150:	080044bc 	.word	0x080044bc
 8003154:	003d0900 	.word	0x003d0900

08003158 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003158:	b480      	push	{r7}
 800315a:	b085      	sub	sp, #20
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003160:	4b0a      	ldr	r3, [pc, #40]	@ (800318c <RCC_Delay+0x34>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <RCC_Delay+0x38>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a5b      	lsrs	r3, r3, #9
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	fb02 f303 	mul.w	r3, r2, r3
 8003172:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003174:	bf00      	nop
  }
  while (Delay --);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	1e5a      	subs	r2, r3, #1
 800317a:	60fa      	str	r2, [r7, #12]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1f9      	bne.n	8003174 <RCC_Delay+0x1c>
}
 8003180:	bf00      	nop
 8003182:	bf00      	nop
 8003184:	3714      	adds	r7, #20
 8003186:	46bd      	mov	sp, r7
 8003188:	bc80      	pop	{r7}
 800318a:	4770      	bx	lr
 800318c:	2000000c 	.word	0x2000000c
 8003190:	10624dd3 	.word	0x10624dd3

08003194 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e076      	b.n	8003294 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d108      	bne.n	80031c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b6:	d009      	beq.n	80031cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	61da      	str	r2, [r3, #28]
 80031be:	e005      	b.n	80031cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2200      	movs	r2, #0
 80031c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f7fe fe7c 	bl	8001ee4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	681a      	ldr	r2, [r3, #0]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003202:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	691b      	ldr	r3, [r3, #16]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	431a      	orrs	r2, r3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695b      	ldr	r3, [r3, #20]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003250:	ea42 0103 	orr.w	r1, r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003258:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	0c1a      	lsrs	r2, r3, #16
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f002 0204 	and.w	r2, r2, #4
 8003272:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69da      	ldr	r2, [r3, #28]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003282:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003292:	2300      	movs	r3, #0
}
 8003294:	4618      	mov	r0, r3
 8003296:	3708      	adds	r7, #8
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}

0800329c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b088      	sub	sp, #32
 80032a0:	af02      	add	r7, sp, #8
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	603b      	str	r3, [r7, #0]
 80032a8:	4613      	mov	r3, r2
 80032aa:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d001      	beq.n	80032bc <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80032b8:	2302      	movs	r3, #2
 80032ba:	e104      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c4:	d112      	bne.n	80032ec <HAL_SPI_Receive+0x50>
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10e      	bne.n	80032ec <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2204      	movs	r2, #4
 80032d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4613      	mov	r3, r2
 80032de:	68ba      	ldr	r2, [r7, #8]
 80032e0:	68b9      	ldr	r1, [r7, #8]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f8f3 	bl	80034ce <HAL_SPI_TransmitReceive>
 80032e8:	4603      	mov	r3, r0
 80032ea:	e0ec      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032ec:	f7fe ffdc 	bl	80022a8 <HAL_GetTick>
 80032f0:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d002      	beq.n	80032fe <HAL_SPI_Receive+0x62>
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e0e1      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003308:	2b01      	cmp	r3, #1
 800330a:	d101      	bne.n	8003310 <HAL_SPI_Receive+0x74>
 800330c:	2302      	movs	r3, #2
 800330e:	e0da      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2201      	movs	r2, #1
 8003314:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2204      	movs	r2, #4
 800331c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2200      	movs	r2, #0
 8003324:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	88fa      	ldrh	r2, [r7, #6]
 8003330:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	88fa      	ldrh	r2, [r7, #6]
 8003336:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2200      	movs	r2, #0
 800333c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2200      	movs	r2, #0
 8003348:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800335e:	d10f      	bne.n	8003380 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800336e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800337e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800338a:	2b40      	cmp	r3, #64	@ 0x40
 800338c:	d007      	beq.n	800339e <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800339c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d170      	bne.n	8003488 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033a6:	e035      	b.n	8003414 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d115      	bne.n	80033e2 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f103 020c 	add.w	r2, r3, #12
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	b2d2      	uxtb	r2, r2
 80033c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80033e0:	e018      	b.n	8003414 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033e2:	f7fe ff61 	bl	80022a8 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d803      	bhi.n	80033fa <HAL_SPI_Receive+0x15e>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d102      	bne.n	8003400 <HAL_SPI_Receive+0x164>
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e058      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1c4      	bne.n	80033a8 <HAL_SPI_Receive+0x10c>
 800341e:	e038      	b.n	8003492 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d113      	bne.n	8003456 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68da      	ldr	r2, [r3, #12]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003438:	b292      	uxth	r2, r2
 800343a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	1c9a      	adds	r2, r3, #2
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800344a:	b29b      	uxth	r3, r3
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003454:	e018      	b.n	8003488 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003456:	f7fe ff27 	bl	80022a8 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	683a      	ldr	r2, [r7, #0]
 8003462:	429a      	cmp	r2, r3
 8003464:	d803      	bhi.n	800346e <HAL_SPI_Receive+0x1d2>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d102      	bne.n	8003474 <HAL_SPI_Receive+0x1d8>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d109      	bne.n	8003488 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2200      	movs	r2, #0
 8003480:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e01e      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800348c:	b29b      	uxth	r3, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1c6      	bne.n	8003420 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 fb4e 	bl	8003b38 <SPI_EndRxTransaction>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2220      	movs	r2, #32
 80034a6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e000      	b.n	80034c6 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80034c4:	2300      	movs	r3, #0
  }
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3718      	adds	r7, #24
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	@ 0x28
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
 80034da:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034dc:	2301      	movs	r3, #1
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034e0:	f7fe fee2 	bl	80022a8 <HAL_GetTick>
 80034e4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034ec:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034f4:	887b      	ldrh	r3, [r7, #2]
 80034f6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034f8:	7ffb      	ldrb	r3, [r7, #31]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d00c      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x4a>
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003504:	d106      	bne.n	8003514 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <HAL_SPI_TransmitReceive+0x46>
 800350e:	7ffb      	ldrb	r3, [r7, #31]
 8003510:	2b04      	cmp	r3, #4
 8003512:	d001      	beq.n	8003518 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
 8003516:	e17f      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d005      	beq.n	800352a <HAL_SPI_TransmitReceive+0x5c>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d002      	beq.n	800352a <HAL_SPI_TransmitReceive+0x5c>
 8003524:	887b      	ldrh	r3, [r7, #2]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e174      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003534:	2b01      	cmp	r3, #1
 8003536:	d101      	bne.n	800353c <HAL_SPI_TransmitReceive+0x6e>
 8003538:	2302      	movs	r3, #2
 800353a:	e16d      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b04      	cmp	r3, #4
 800354e:	d003      	beq.n	8003558 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2205      	movs	r2, #5
 8003554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	887a      	ldrh	r2, [r7, #2]
 8003568:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	887a      	ldrh	r2, [r7, #2]
 800356e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	68ba      	ldr	r2, [r7, #8]
 8003574:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	887a      	ldrh	r2, [r7, #2]
 800357a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	887a      	ldrh	r2, [r7, #2]
 8003580:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b40      	cmp	r3, #64	@ 0x40
 800359a:	d007      	beq.n	80035ac <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035b4:	d17e      	bne.n	80036b4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d002      	beq.n	80035c4 <HAL_SPI_TransmitReceive+0xf6>
 80035be:	8afb      	ldrh	r3, [r7, #22]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	d16c      	bne.n	800369e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c8:	881a      	ldrh	r2, [r3, #0]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	1c9a      	adds	r2, r3, #2
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035de:	b29b      	uxth	r3, r3
 80035e0:	3b01      	subs	r3, #1
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035e8:	e059      	b.n	800369e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d11b      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x162>
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035fc:	b29b      	uxth	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d016      	beq.n	8003630 <HAL_SPI_TransmitReceive+0x162>
 8003602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003604:	2b01      	cmp	r3, #1
 8003606:	d113      	bne.n	8003630 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800360c:	881a      	ldrh	r2, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003618:	1c9a      	adds	r2, r3, #2
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003622:	b29b      	uxth	r3, r3
 8003624:	3b01      	subs	r3, #1
 8003626:	b29a      	uxth	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b01      	cmp	r3, #1
 800363c:	d119      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x1a4>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	d014      	beq.n	8003672 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68da      	ldr	r2, [r3, #12]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003652:	b292      	uxth	r2, r2
 8003654:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365a:	1c9a      	adds	r2, r3, #2
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800366e:	2301      	movs	r3, #1
 8003670:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003672:	f7fe fe19 	bl	80022a8 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800367e:	429a      	cmp	r2, r3
 8003680:	d80d      	bhi.n	800369e <HAL_SPI_TransmitReceive+0x1d0>
 8003682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003688:	d009      	beq.n	800369e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800369a:	2303      	movs	r3, #3
 800369c:	e0bc      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1a0      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x11c>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036ac:	b29b      	uxth	r3, r3
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d19b      	bne.n	80035ea <HAL_SPI_TransmitReceive+0x11c>
 80036b2:	e082      	b.n	80037ba <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d002      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x1f4>
 80036bc:	8afb      	ldrh	r3, [r7, #22]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d171      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	330c      	adds	r3, #12
 80036cc:	7812      	ldrb	r2, [r2, #0]
 80036ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d4:	1c5a      	adds	r2, r3, #1
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036de:	b29b      	uxth	r3, r3
 80036e0:	3b01      	subs	r3, #1
 80036e2:	b29a      	uxth	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036e8:	e05d      	b.n	80037a6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d11c      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x264>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d017      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x264>
 8003702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003704:	2b01      	cmp	r3, #1
 8003706:	d114      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	330c      	adds	r3, #12
 8003712:	7812      	ldrb	r2, [r2, #0]
 8003714:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f003 0301 	and.w	r3, r3, #1
 800373c:	2b01      	cmp	r3, #1
 800373e:	d119      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x2a6>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003744:	b29b      	uxth	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d014      	beq.n	8003774 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68da      	ldr	r2, [r3, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003766:	b29b      	uxth	r3, r3
 8003768:	3b01      	subs	r3, #1
 800376a:	b29a      	uxth	r2, r3
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003770:	2301      	movs	r3, #1
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003774:	f7fe fd98 	bl	80022a8 <HAL_GetTick>
 8003778:	4602      	mov	r2, r0
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003780:	429a      	cmp	r2, r3
 8003782:	d803      	bhi.n	800378c <HAL_SPI_TransmitReceive+0x2be>
 8003784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800378a:	d102      	bne.n	8003792 <HAL_SPI_TransmitReceive+0x2c4>
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e038      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d19c      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x21c>
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d197      	bne.n	80036ea <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037ba:	6a3a      	ldr	r2, [r7, #32]
 80037bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037be:	68f8      	ldr	r0, [r7, #12]
 80037c0:	f000 fa0c 	bl	8003bdc <SPI_EndRxTxTransaction>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d008      	beq.n	80037dc <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e01d      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037e4:	2300      	movs	r3, #0
 80037e6:	613b      	str	r3, [r7, #16]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	613b      	str	r3, [r7, #16]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	613b      	str	r3, [r7, #16]
 80037f8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e000      	b.n	8003818 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003816:	2300      	movs	r3, #0
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3728      	adds	r7, #40	@ 0x28
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b088      	sub	sp, #32
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	099b      	lsrs	r3, r3, #6
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	2b00      	cmp	r3, #0
 8003842:	d10f      	bne.n	8003864 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003844:	69bb      	ldr	r3, [r7, #24]
 8003846:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b00      	cmp	r3, #0
 8003858:	d004      	beq.n	8003864 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
    return;
 8003862:	e0be      	b.n	80039e2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003864:	69bb      	ldr	r3, [r7, #24]
 8003866:	085b      	lsrs	r3, r3, #1
 8003868:	f003 0301 	and.w	r3, r3, #1
 800386c:	2b00      	cmp	r3, #0
 800386e:	d00a      	beq.n	8003886 <HAL_SPI_IRQHandler+0x66>
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	09db      	lsrs	r3, r3, #7
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
    return;
 8003884:	e0ad      	b.n	80039e2 <HAL_SPI_IRQHandler+0x1c2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET))
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	095b      	lsrs	r3, r3, #5
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_SPI_IRQHandler+0x80>
 8003892:	69bb      	ldr	r3, [r7, #24]
 8003894:	099b      	lsrs	r3, r3, #6
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	f000 80a1 	beq.w	80039e2 <HAL_SPI_IRQHandler+0x1c2>
      && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80038a0:	69fb      	ldr	r3, [r7, #28]
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	f000 809a 	beq.w	80039e2 <HAL_SPI_IRQHandler+0x1c2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d023      	beq.n	8003902 <HAL_SPI_IRQHandler+0xe2>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b03      	cmp	r3, #3
 80038c4:	d011      	beq.n	80038ea <HAL_SPI_IRQHandler+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ca:	f043 0204 	orr.w	r2, r3, #4
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	617b      	str	r3, [r7, #20]
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	e00b      	b.n	8003902 <HAL_SPI_IRQHandler+0xe2>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ea:	2300      	movs	r3, #0
 80038ec:	613b      	str	r3, [r7, #16]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	613b      	str	r3, [r7, #16]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	613b      	str	r3, [r7, #16]
 80038fe:	693b      	ldr	r3, [r7, #16]
        return;
 8003900:	e06f      	b.n	80039e2 <HAL_SPI_IRQHandler+0x1c2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	095b      	lsrs	r3, r3, #5
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	2b00      	cmp	r3, #0
 800390c:	d014      	beq.n	8003938 <HAL_SPI_IRQHandler+0x118>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800391a:	2300      	movs	r3, #0
 800391c:	60fb      	str	r3, [r7, #12]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800393c:	2b00      	cmp	r3, #0
 800393e:	d04f      	beq.n	80039e0 <HAL_SPI_IRQHandler+0x1c0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800394e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003958:	69fb      	ldr	r3, [r7, #28]
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d104      	bne.n	800396c <HAL_SPI_IRQHandler+0x14c>
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	f003 0301 	and.w	r3, r3, #1
 8003968:	2b00      	cmp	r3, #0
 800396a:	d034      	beq.n	80039d6 <HAL_SPI_IRQHandler+0x1b6>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0203 	bic.w	r2, r2, #3
 800397a:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003980:	2b00      	cmp	r3, #0
 8003982:	d011      	beq.n	80039a8 <HAL_SPI_IRQHandler+0x188>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003988:	4a17      	ldr	r2, [pc, #92]	@ (80039e8 <HAL_SPI_IRQHandler+0x1c8>)
 800398a:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003990:	4618      	mov	r0, r3
 8003992:	f7fe fdc5 	bl	8002520 <HAL_DMA_Abort_IT>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d005      	beq.n	80039a8 <HAL_SPI_IRQHandler+0x188>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039a0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d016      	beq.n	80039de <HAL_SPI_IRQHandler+0x1be>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039b4:	4a0c      	ldr	r2, [pc, #48]	@ (80039e8 <HAL_SPI_IRQHandler+0x1c8>)
 80039b6:	635a      	str	r2, [r3, #52]	@ 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80039bc:	4618      	mov	r0, r3
 80039be:	f7fe fdaf 	bl	8002520 <HAL_DMA_Abort_IT>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <HAL_SPI_IRQHandler+0x1be>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80039d4:	e003      	b.n	80039de <HAL_SPI_IRQHandler+0x1be>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 f808 	bl	80039ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80039dc:	e000      	b.n	80039e0 <HAL_SPI_IRQHandler+0x1c0>
        if (hspi->hdmatx != NULL)
 80039de:	bf00      	nop
    return;
 80039e0:	bf00      	nop
  }
}
 80039e2:	3720      	adds	r7, #32
 80039e4:	46bd      	mov	sp, r7
 80039e6:	bd80      	pop	{r7, pc}
 80039e8:	080039ff 	.word	0x080039ff

080039ec <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039f4:	bf00      	nop
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a0a:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f7ff ffe7 	bl	80039ec <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
	...

08003a28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b088      	sub	sp, #32
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a38:	f7fe fc36 	bl	80022a8 <HAL_GetTick>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	4413      	add	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003a48:	f7fe fc2e 	bl	80022a8 <HAL_GetTick>
 8003a4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003a4e:	4b39      	ldr	r3, [pc, #228]	@ (8003b34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	015b      	lsls	r3, r3, #5
 8003a54:	0d1b      	lsrs	r3, r3, #20
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	fb02 f303 	mul.w	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a5e:	e054      	b.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a66:	d050      	beq.n	8003b0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a68:	f7fe fc1e 	bl	80022a8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d902      	bls.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d13d      	bne.n	8003afa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	685a      	ldr	r2, [r3, #4]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003a8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a96:	d111      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003aa0:	d004      	beq.n	8003aac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003aaa:	d107      	bne.n	8003abc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003aba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ac4:	d10f      	bne.n	8003ae6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ad4:	601a      	str	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ae4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2201      	movs	r2, #1
 8003aea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e017      	b.n	8003b2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	3b01      	subs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689a      	ldr	r2, [r3, #8]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	bf0c      	ite	eq
 8003b1a:	2301      	moveq	r3, #1
 8003b1c:	2300      	movne	r3, #0
 8003b1e:	b2db      	uxtb	r3, r3
 8003b20:	461a      	mov	r2, r3
 8003b22:	79fb      	ldrb	r3, [r7, #7]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d19b      	bne.n	8003a60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3720      	adds	r7, #32
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	2000000c 	.word	0x2000000c

08003b38 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af02      	add	r7, sp, #8
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b4c:	d111      	bne.n	8003b72 <SPI_EndRxTransaction+0x3a>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b56:	d004      	beq.n	8003b62 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b60:	d107      	bne.n	8003b72 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b70:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b7a:	d117      	bne.n	8003bac <SPI_EndRxTransaction+0x74>
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b84:	d112      	bne.n	8003bac <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	9300      	str	r3, [sp, #0]
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	2101      	movs	r1, #1
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff ff49 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d01a      	beq.n	8003bd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ba0:	f043 0220 	orr.w	r2, r3, #32
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e013      	b.n	8003bd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2180      	movs	r1, #128	@ 0x80
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f7ff ff36 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d007      	beq.n	8003bd2 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc6:	f043 0220 	orr.w	r2, r3, #32
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e000      	b.n	8003bd4 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3710      	adds	r7, #16
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b086      	sub	sp, #24
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	9300      	str	r3, [sp, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	2102      	movs	r1, #2
 8003bf2:	68f8      	ldr	r0, [r7, #12]
 8003bf4:	f7ff ff18 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c02:	f043 0220 	orr.w	r2, r3, #32
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e013      	b.n	8003c36 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	2180      	movs	r1, #128	@ 0x80
 8003c18:	68f8      	ldr	r0, [r7, #12]
 8003c1a:	f7ff ff05 	bl	8003a28 <SPI_WaitFlagStateUntilTimeout>
 8003c1e:	4603      	mov	r3, r0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d007      	beq.n	8003c34 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c30:	2303      	movs	r3, #3
 8003c32:	e000      	b.n	8003c36 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b082      	sub	sp, #8
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d101      	bne.n	8003c50 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e041      	b.n	8003cd4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c56:	b2db      	uxtb	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d106      	bne.n	8003c6a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fe f9bb 	bl	8001fe0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2202      	movs	r2, #2
 8003c6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	3304      	adds	r3, #4
 8003c7a:	4619      	mov	r1, r3
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	f000 fa5b 	bl	8004138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2201      	movs	r2, #1
 8003cce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d001      	beq.n	8003cf4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e03a      	b.n	8003d6a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f042 0201 	orr.w	r2, r2, #1
 8003d0a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a18      	ldr	r2, [pc, #96]	@ (8003d74 <HAL_TIM_Base_Start_IT+0x98>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1e:	d009      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a14      	ldr	r2, [pc, #80]	@ (8003d78 <HAL_TIM_Base_Start_IT+0x9c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_TIM_Base_Start_IT+0x58>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a13      	ldr	r2, [pc, #76]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xa0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d111      	bne.n	8003d58 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f003 0307 	and.w	r3, r3, #7
 8003d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2b06      	cmp	r3, #6
 8003d44:	d010      	beq.n	8003d68 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f042 0201 	orr.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d56:	e007      	b.n	8003d68 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	681a      	ldr	r2, [r3, #0]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f042 0201 	orr.w	r2, r2, #1
 8003d66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3714      	adds	r7, #20
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800

08003d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	f003 0302 	and.w	r3, r3, #2
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d020      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d01b      	beq.n	8003de4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f06f 0202 	mvn.w	r2, #2
 8003db4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	f003 0303 	and.w	r3, r3, #3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d003      	beq.n	8003dd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f998 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003dd0:	e005      	b.n	8003dde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f98b 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f99a 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	f003 0304 	and.w	r3, r3, #4
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d020      	beq.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f003 0304 	and.w	r3, r3, #4
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01b      	beq.n	8003e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f06f 0204 	mvn.w	r2, #4
 8003e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f972 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003e1c:	e005      	b.n	8003e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f965 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e24:	6878      	ldr	r0, [r7, #4]
 8003e26:	f000 f974 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d020      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	f003 0308 	and.w	r3, r3, #8
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d01b      	beq.n	8003e7c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0208 	mvn.w	r2, #8
 8003e4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2204      	movs	r2, #4
 8003e52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	69db      	ldr	r3, [r3, #28]
 8003e5a:	f003 0303 	and.w	r3, r3, #3
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f94c 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003e68:	e005      	b.n	8003e76 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f93f 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 f94e 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0310 	and.w	r3, r3, #16
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d020      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0310 	and.w	r3, r3, #16
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d01b      	beq.n	8003ec8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0210 	mvn.w	r2, #16
 8003e98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2208      	movs	r2, #8
 8003e9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f926 	bl	8004100 <HAL_TIM_IC_CaptureCallback>
 8003eb4:	e005      	b.n	8003ec2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f919 	bl	80040ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f000 f928 	bl	8004112 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ec8:	68bb      	ldr	r3, [r7, #8]
 8003eca:	f003 0301 	and.w	r3, r3, #1
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00c      	beq.n	8003eec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0201 	mvn.w	r2, #1
 8003ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ee6:	6878      	ldr	r0, [r7, #4]
 8003ee8:	f7fd ff2e 	bl	8001d48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d00c      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f000 fa7f 	bl	800440e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d00c      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d007      	beq.n	8003f34 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f8f8 	bl	8004124 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00c      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0320 	and.w	r3, r3, #32
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d007      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f06f 0220 	mvn.w	r2, #32
 8003f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 fa52 	bl	80043fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f58:	bf00      	nop
 8003f5a:	3710      	adds	r7, #16
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b084      	sub	sp, #16
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_TIM_ConfigClockSource+0x1c>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0b4      	b.n	80040e6 <HAL_TIM_ConfigClockSource+0x186>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2202      	movs	r2, #2
 8003f88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003f9a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fa2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fb4:	d03e      	beq.n	8004034 <HAL_TIM_ConfigClockSource+0xd4>
 8003fb6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fba:	f200 8087 	bhi.w	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fc2:	f000 8086 	beq.w	80040d2 <HAL_TIM_ConfigClockSource+0x172>
 8003fc6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fca:	d87f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fcc:	2b70      	cmp	r3, #112	@ 0x70
 8003fce:	d01a      	beq.n	8004006 <HAL_TIM_ConfigClockSource+0xa6>
 8003fd0:	2b70      	cmp	r3, #112	@ 0x70
 8003fd2:	d87b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fd4:	2b60      	cmp	r3, #96	@ 0x60
 8003fd6:	d050      	beq.n	800407a <HAL_TIM_ConfigClockSource+0x11a>
 8003fd8:	2b60      	cmp	r3, #96	@ 0x60
 8003fda:	d877      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fdc:	2b50      	cmp	r3, #80	@ 0x50
 8003fde:	d03c      	beq.n	800405a <HAL_TIM_ConfigClockSource+0xfa>
 8003fe0:	2b50      	cmp	r3, #80	@ 0x50
 8003fe2:	d873      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	d058      	beq.n	800409a <HAL_TIM_ConfigClockSource+0x13a>
 8003fe8:	2b40      	cmp	r3, #64	@ 0x40
 8003fea:	d86f      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003fec:	2b30      	cmp	r3, #48	@ 0x30
 8003fee:	d064      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	2b30      	cmp	r3, #48	@ 0x30
 8003ff2:	d86b      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ff4:	2b20      	cmp	r3, #32
 8003ff6:	d060      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8003ff8:	2b20      	cmp	r3, #32
 8003ffa:	d867      	bhi.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d05c      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004000:	2b10      	cmp	r3, #16
 8004002:	d05a      	beq.n	80040ba <HAL_TIM_ConfigClockSource+0x15a>
 8004004:	e062      	b.n	80040cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	f000 f974 	bl	8004302 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004028:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	609a      	str	r2, [r3, #8]
      break;
 8004032:	e04f      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004044:	f000 f95d 	bl	8004302 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004056:	609a      	str	r2, [r3, #8]
      break;
 8004058:	e03c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004066:	461a      	mov	r2, r3
 8004068:	f000 f8d4 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2150      	movs	r1, #80	@ 0x50
 8004072:	4618      	mov	r0, r3
 8004074:	f000 f92b 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8004078:	e02c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004086:	461a      	mov	r2, r3
 8004088:	f000 f8f2 	bl	8004270 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2160      	movs	r1, #96	@ 0x60
 8004092:	4618      	mov	r0, r3
 8004094:	f000 f91b 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 8004098:	e01c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040a6:	461a      	mov	r2, r3
 80040a8:	f000 f8b4 	bl	8004214 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	@ 0x40
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f90b 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040b8:	e00c      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4619      	mov	r1, r3
 80040c4:	4610      	mov	r0, r2
 80040c6:	f000 f902 	bl	80042ce <TIM_ITRx_SetConfig>
      break;
 80040ca:	e003      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	73fb      	strb	r3, [r7, #15]
      break;
 80040d0:	e000      	b.n	80040d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}

080040ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004100:	b480      	push	{r7}
 8004102:	b083      	sub	sp, #12
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004108:	bf00      	nop
 800410a:	370c      	adds	r7, #12
 800410c:	46bd      	mov	sp, r7
 800410e:	bc80      	pop	{r7}
 8004110:	4770      	bx	lr

08004112 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004112:	b480      	push	{r7}
 8004114:	b083      	sub	sp, #12
 8004116:	af00      	add	r7, sp, #0
 8004118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	bc80      	pop	{r7}
 8004134:	4770      	bx	lr
	...

08004138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
 8004140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4a2f      	ldr	r2, [pc, #188]	@ (8004208 <TIM_Base_SetConfig+0xd0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00b      	beq.n	8004168 <TIM_Base_SetConfig+0x30>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004156:	d007      	beq.n	8004168 <TIM_Base_SetConfig+0x30>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a2c      	ldr	r2, [pc, #176]	@ (800420c <TIM_Base_SetConfig+0xd4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d003      	beq.n	8004168 <TIM_Base_SetConfig+0x30>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	4a2b      	ldr	r2, [pc, #172]	@ (8004210 <TIM_Base_SetConfig+0xd8>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d108      	bne.n	800417a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800416e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	68fa      	ldr	r2, [r7, #12]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a22      	ldr	r2, [pc, #136]	@ (8004208 <TIM_Base_SetConfig+0xd0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00b      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004188:	d007      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1f      	ldr	r2, [pc, #124]	@ (800420c <TIM_Base_SetConfig+0xd4>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d003      	beq.n	800419a <TIM_Base_SetConfig+0x62>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <TIM_Base_SetConfig+0xd8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d108      	bne.n	80041ac <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	68fa      	ldr	r2, [r7, #12]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a0d      	ldr	r2, [pc, #52]	@ (8004208 <TIM_Base_SetConfig+0xd0>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d103      	bne.n	80041e0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d005      	beq.n	80041fe <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f023 0201 	bic.w	r2, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	611a      	str	r2, [r3, #16]
  }
}
 80041fe:	bf00      	nop
 8004200:	3714      	adds	r7, #20
 8004202:	46bd      	mov	sp, r7
 8004204:	bc80      	pop	{r7}
 8004206:	4770      	bx	lr
 8004208:	40012c00 	.word	0x40012c00
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800

08004214 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b087      	sub	sp, #28
 8004218:	af00      	add	r7, sp, #0
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6a1b      	ldr	r3, [r3, #32]
 8004224:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800423e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f023 030a 	bic.w	r3, r3, #10
 8004250:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	621a      	str	r2, [r3, #32]
}
 8004266:	bf00      	nop
 8004268:	371c      	adds	r7, #28
 800426a:	46bd      	mov	sp, r7
 800426c:	bc80      	pop	{r7}
 800426e:	4770      	bx	lr

08004270 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004270:	b480      	push	{r7}
 8004272:	b087      	sub	sp, #28
 8004274:	af00      	add	r7, sp, #0
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6a1b      	ldr	r3, [r3, #32]
 8004280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	f023 0210 	bic.w	r2, r3, #16
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800429a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	031b      	lsls	r3, r3, #12
 80042a0:	693a      	ldr	r2, [r7, #16]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80042ac:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	693a      	ldr	r2, [r7, #16]
 80042bc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	697a      	ldr	r2, [r7, #20]
 80042c2:	621a      	str	r2, [r3, #32]
}
 80042c4:	bf00      	nop
 80042c6:	371c      	adds	r7, #28
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bc80      	pop	{r7}
 80042cc:	4770      	bx	lr

080042ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
 80042d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	f043 0307 	orr.w	r3, r3, #7
 80042f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	609a      	str	r2, [r3, #8]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr

08004302 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004302:	b480      	push	{r7}
 8004304:	b087      	sub	sp, #28
 8004306:	af00      	add	r7, sp, #0
 8004308:	60f8      	str	r0, [r7, #12]
 800430a:	60b9      	str	r1, [r7, #8]
 800430c:	607a      	str	r2, [r7, #4]
 800430e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800431c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	021a      	lsls	r2, r3, #8
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	431a      	orrs	r2, r3
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	4313      	orrs	r3, r2
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	4313      	orrs	r3, r2
 800432e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	609a      	str	r2, [r3, #8]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004354:	2302      	movs	r3, #2
 8004356:	e046      	b.n	80043e6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2202      	movs	r2, #2
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800437e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68fa      	ldr	r2, [r7, #12]
 8004386:	4313      	orrs	r3, r2
 8004388:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a16      	ldr	r2, [pc, #88]	@ (80043f0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043a4:	d009      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a12      	ldr	r2, [pc, #72]	@ (80043f4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a10      	ldr	r2, [pc, #64]	@ (80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d10c      	bne.n	80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bc80      	pop	{r7}
 80043ee:	4770      	bx	lr
 80043f0:	40012c00 	.word	0x40012c00
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800

080043fc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	bc80      	pop	{r7}
 800440c:	4770      	bx	lr

0800440e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	bc80      	pop	{r7}
 800441e:	4770      	bx	lr

08004420 <memset>:
 8004420:	4603      	mov	r3, r0
 8004422:	4402      	add	r2, r0
 8004424:	4293      	cmp	r3, r2
 8004426:	d100      	bne.n	800442a <memset+0xa>
 8004428:	4770      	bx	lr
 800442a:	f803 1b01 	strb.w	r1, [r3], #1
 800442e:	e7f9      	b.n	8004424 <memset+0x4>

08004430 <__libc_init_array>:
 8004430:	b570      	push	{r4, r5, r6, lr}
 8004432:	2600      	movs	r6, #0
 8004434:	4d0c      	ldr	r5, [pc, #48]	@ (8004468 <__libc_init_array+0x38>)
 8004436:	4c0d      	ldr	r4, [pc, #52]	@ (800446c <__libc_init_array+0x3c>)
 8004438:	1b64      	subs	r4, r4, r5
 800443a:	10a4      	asrs	r4, r4, #2
 800443c:	42a6      	cmp	r6, r4
 800443e:	d109      	bne.n	8004454 <__libc_init_array+0x24>
 8004440:	f000 f81a 	bl	8004478 <_init>
 8004444:	2600      	movs	r6, #0
 8004446:	4d0a      	ldr	r5, [pc, #40]	@ (8004470 <__libc_init_array+0x40>)
 8004448:	4c0a      	ldr	r4, [pc, #40]	@ (8004474 <__libc_init_array+0x44>)
 800444a:	1b64      	subs	r4, r4, r5
 800444c:	10a4      	asrs	r4, r4, #2
 800444e:	42a6      	cmp	r6, r4
 8004450:	d105      	bne.n	800445e <__libc_init_array+0x2e>
 8004452:	bd70      	pop	{r4, r5, r6, pc}
 8004454:	f855 3b04 	ldr.w	r3, [r5], #4
 8004458:	4798      	blx	r3
 800445a:	3601      	adds	r6, #1
 800445c:	e7ee      	b.n	800443c <__libc_init_array+0xc>
 800445e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004462:	4798      	blx	r3
 8004464:	3601      	adds	r6, #1
 8004466:	e7f2      	b.n	800444e <__libc_init_array+0x1e>
 8004468:	080044c0 	.word	0x080044c0
 800446c:	080044c0 	.word	0x080044c0
 8004470:	080044c0 	.word	0x080044c0
 8004474:	080044c4 	.word	0x080044c4

08004478 <_init>:
 8004478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800447a:	bf00      	nop
 800447c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447e:	bc08      	pop	{r3}
 8004480:	469e      	mov	lr, r3
 8004482:	4770      	bx	lr

08004484 <_fini>:
 8004484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004486:	bf00      	nop
 8004488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800448a:	bc08      	pop	{r3}
 800448c:	469e      	mov	lr, r3
 800448e:	4770      	bx	lr
